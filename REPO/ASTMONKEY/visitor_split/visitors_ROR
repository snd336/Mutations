coverage:
  all_nodes: 0
  covered_nodes: 0
mutation_score: 84.21052631578947
mutations:
- exception_traceback: null
  killer: null
  module: &id001
  mutations:
  - lineno: 17
    operator: ROR
  number: 1
  status: survived
  tests_run: 316
  time: 0.7529385089874268
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000226BAEEE2C8>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x00000226BAD47CC8>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n>       dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    E       IndexError: list index out of range\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:41:\
    \ IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: *id001
  mutations:
  - lineno: 17
    operator: ROR
  number: 2
  status: killed
  tests_run: 3
  time: 0.383725643157959
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000226BB0F4E08>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x00000226BAF1F148>\n\n    def\
    \ test_has_edge(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n>       visitor.visit(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:25:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:20: in visit\n    ???\nvisitors:52: in _dot_edge\n    ???\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.GraphNodeVisitor object at 0x00000226BAF1F148>\nnode =\
    \ <_ast.Module object at 0x00000226BB11AD48>\n\n>   ???\nE   AttributeError: 'Module'\
    \ object has no attribute 'parent_field'\n\nvisitors:55: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: *id001
  mutations:
  - lineno: 19
    operator: ROR
  number: 3
  status: killed
  tests_run: 1
  time: 0.34018373489379883
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000226BB2EE0C8>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x00000226BB1203C8>\n\n    def\
    \ test_multi_parents_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1\\nx = 2'))\n    \n        visitor.visit(node)\n    \n        dot_node =\
    \ visitor.graph.get_node(str(node.body[0].targets[0]))[0]\n>       assert dot_node.get_label()\
    \ == \"ast.Name(id='x', ctx=ast.Store())\"\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:61: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_multi_parents_node_label
  module: *id001
  mutations:
  - lineno: 41
    operator: ROR
  number: 4
  status: killed
  tests_run: 5
  time: 0.3382275104522705
- exception_traceback: null
  killer: null
  module: *id001
  mutations:
  - lineno: 41
    operator: ROR
  number: 5
  status: survived
  tests_run: 316
  time: 0.7934105396270752
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BB71EE88>\nsource = 'x = 1\\n\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\n\nx = 1]
  module: *id001
  mutations:
  - lineno: 170
    operator: ROR
  number: 6
  status: killed
  tests_run: 12
  time: 0.348407506942749
- exception_traceback: null
  killer: null
  module: *id001
  mutations:
  - lineno: 170
    operator: ROR
  number: 7
  status: survived
  tests_run: 316
  time: 0.762913703918457
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BBAF5EC8>\nsource = 'def f():\\n    yield'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:884: in visit_FunctionDef\n   \
    \ ???\nvisitors:271: in body\n    ???\nvisitors:251: in correct_line_number\n\
    \    ???\nvisitors:254: in add_missing_lines\n    ???\nvisitors:222: in _newline_needed\n\
    \    ???\nvisitors:203: in _get_actual_lineno\n    ???\n_ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Expr\
    \ object at 0x00000226BBB030C8>\n\n>   ???\nE   AttributeError: 'Yield' object\
    \ has no attribute 's'\n\nvisitors:213: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield]
  module: *id001
  mutations:
  - lineno: 202
    operator: ROR
  number: 8
  status: killed
  tests_run: 29
  time: 0.42768025398254395
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BBD22888>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n>       generated = to_source(node)\n\nsrc\\\
    tests\\astmonkeytests\\test_visitors.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvisitors:137: in to_source\n\
    \    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:352: in\
    \ visit_Module\n    ???\nvisitors:271: in body\n    ???\nvisitors:251: in correct_line_number\n\
    \    ???\nvisitors:254: in add_missing_lines\n    ???\nvisitors:222: in _newline_needed\n\
    \    ???\nvisitors:203: in _get_actual_lineno\n    ???\n_ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Expr\
    \ object at 0x00000226BBD22F48>\n\n>   ???\nE   AttributeError: 'str' object has\
    \ no attribute 'decode'\n\nvisitors:217: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: *id001
  mutations:
  - lineno: 216
    operator: ROR
  number: 9
  status: killed
  tests_run: 121
  time: 0.5046384334564209
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BBF114C8>\nsource = 'x = 1\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\nx = 1]
  module: *id001
  mutations:
  - lineno: 224
    operator: ROR
  number: 10
  status: killed
  tests_run: 11
  time: 0.36497926712036133
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC110248>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: *id001
  mutations:
  - lineno: 224
    operator: ROR
  number: 11
  status: killed
  tests_run: 6
  time: 0.3416624069213867
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BBB2AE88>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: *id001
  mutations:
  - lineno: 321
    operator: ROR
  number: 12
  status: killed
  tests_run: 19
  time: 0.4079091548919678
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC3F3988>\nsource = 'if x:\\n    pass\\nelif y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelif y:\n    pass]
  module: *id001
  mutations:
  - lineno: 452
    operator: ROR
  number: 13
  status: killed
  tests_run: 54
  time: 0.4195108413696289
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC5FEC48>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: *id001
  mutations:
  - lineno: 608
    operator: ROR
  number: 14
  status: killed
  tests_run: 6
  time: 0.3452303409576416
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC80F5C8>\nsource = '0 + 0j'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[0
    + 0j]
  module: *id001
  mutations:
  - lineno: 608
    operator: ROR
  number: 15
  status: killed
  tests_run: 50
  time: 0.4689490795135498
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC9D21C8>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: *id001
  mutations:
  - lineno: 671
    operator: ROR
  number: 16
  status: killed
  tests_run: 44
  time: 0.3948962688446045
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BCBB2748>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: *id001
  mutations:
  - lineno: 692
    operator: ROR
  number: 17
  status: killed
  tests_run: 88
  time: 0.4483163356781006
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC3C9288>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: *id001
  mutations:
  - lineno: 916
    operator: ROR
  number: 18
  status: killed
  tests_run: 79
  time: 1.4046592712402344
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BCF01688>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:391: in visit_Expr\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:281: in generic_visit\n\
    \    self.visit(value)\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:1006:\
    \ in visit_JoinedStr\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x00000226BCE97848>\n\
    node = <_ast.FormattedValue object at 0x00000226BCF01908>\n\n>   ???\nE   OverflowError:\
    \ %c arg not in range(0x110000)\n\nvisitors:1013: OverflowError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: *id001
  mutations:
  - lineno: 1012
    operator: ROR
  number: 19
  status: killed
  tests_run: 154
  time: 1.4615147113800049
number_of_tests: 316
targets:
- src/astmonkey/visitors.py
tests:
- name: test_visitors
  target: null
  time: 1.425107717514038
time_stats:
  create_mutant_module: 0.0909886360168457
  create_target_ast: 0.029929399490356445
  mutate_module: 11.098642110824585
  run_tests_with_mutant: 10.716259241104126
total_time: 12.52972412109375
