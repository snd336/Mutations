mutations:
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000264E7F8BD08>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 202
    operator: AOD
  number: 1
  status: killed
  tests_run: 121
  time: 0.5004277229309082
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000264E8167288>\nsource = 'del x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x00000264E79BD448>\nnode = <_ast.Delete object at 0x00000264E8167388>\n\
    \n>   ???\nE   IndexError: list index out of range\n\nvisitors:498: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[del
    x]
  module: null
  mutations:
  - lineno: 498
    operator: AOD
  number: 2
  status: killed
  tests_run: 77
  time: 0.47672605514526367
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 613
    operator: AOD
  number: 3
  status: survived
  tests_run: 316
  time: 0.7586143016815186
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000264E9572908>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:823: in visit_With\n    ???\n_\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x00000264E7FCC4C8>\n\
    node = <_ast.With object at 0x00000264E9572A08>, prefixes = []\n\n>   ???\nE \
    \  IndexError: list index out of range\n\nvisitors:916: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 916
    operator: AOD
  number: 4
  status: killed
  tests_run: 79
  time: 0.4849982261657715
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000264E97EF648>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:391: in visit_Expr\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:281: in generic_visit\n\
    \    self.visit(value)\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:1006:\
    \ in visit_JoinedStr\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x00000264E97C0088>\n\
    node = <_ast.FormattedValue object at 0x00000264E97EF8C8>\n\n>   ???\nE   OverflowError:\
    \ %c arg not in range(0x110000)\n\nvisitors:1013: OverflowError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1012
    operator: AOD
  number: 5
  status: killed
  tests_run: 154
  time: 0.5562229156494141
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 120
    operator: AOR
  number: 6
  status: incompetent
  tests_run: 0
  time: 0
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 120
    operator: AOR
  number: 7
  status: incompetent
  tests_run: 0
  time: 0
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 120
    operator: AOR
  number: 8
  status: incompetent
  tests_run: 0
  time: 0
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F10A36BC88>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 202
    operator: AOR
  number: 9
  status: killed
  tests_run: 121
  time: 0.4952869415283203
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F10A5B6D48>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 204
    operator: AOR
  number: 10
  status: killed
  tests_run: 121
  time: 0.5196645259857178
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 223
    operator: AOR
  number: 11
  status: timeout
  tests_run: null
  time: 7.181799650192261
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 265
    operator: AOR
  number: 12
  status: incompetent
  tests_run: 6
  time: 0.40346455574035645
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 265
    operator: AOR
  number: 13
  status: incompetent
  tests_run: 6
  time: 0.34438276290893555
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 265
    operator: AOR
  number: 14
  status: incompetent
  tests_run: 6
  time: 0.3474907875061035
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 292
    operator: AOR
  number: 15
  status: incompetent
  tests_run: 120
  time: 0.5392665863037109
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 292
    operator: AOR
  number: 16
  status: incompetent
  tests_run: 120
  time: 0.50740647315979
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 292
    operator: AOR
  number: 17
  status: incompetent
  tests_run: 120
  time: 0.5004138946533203
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 292
    operator: AOR
  number: 18
  status: incompetent
  tests_run: 120
  time: 0.5033166408538818
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 292
    operator: AOR
  number: 19
  status: incompetent
  tests_run: 120
  time: 0.5434446334838867
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 292
    operator: AOR
  number: 20
  status: incompetent
  tests_run: 120
  time: 0.5112688541412354
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 292
    operator: AOR
  number: 21
  status: incompetent
  tests_run: 120
  time: 0.5677809715270996
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 296
    operator: AOR
  number: 22
  status: incompetent
  tests_run: 19
  time: 0.3763716220855713
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 296
    operator: AOR
  number: 23
  status: incompetent
  tests_run: 19
  time: 0.42377161979675293
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 296
    operator: AOR
  number: 24
  status: incompetent
  tests_run: 19
  time: 0.3662068843841553
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F10D10F708>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 296
    operator: AOR
  number: 25
  status: killed
  tests_run: 24
  time: 0.3656134605407715
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 298
    operator: AOR
  number: 26
  status: incompetent
  tests_run: 19
  time: 0.3715050220489502
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 334
    operator: AOR
  number: 27
  status: incompetent
  tests_run: 24
  time: 0.37953877449035645
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 335
    operator: AOR
  number: 28
  status: survived
  tests_run: 316
  time: 0.8193385601043701
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 366
    operator: AOR
  number: 29
  status: incompetent
  tests_run: 8
  time: 0.36351799964904785
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 366
    operator: AOR
  number: 30
  status: incompetent
  tests_run: 8
  time: 0.35547947883605957
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 375
    operator: AOR
  number: 31
  status: incompetent
  tests_run: 37
  time: 0.39200568199157715
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 377
    operator: AOR
  number: 32
  status: incompetent
  tests_run: 35
  time: 0.3914775848388672
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 377
    operator: AOR
  number: 33
  status: incompetent
  tests_run: 35
  time: 0.3914797306060791
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 377
    operator: AOR
  number: 34
  status: incompetent
  tests_run: 35
  time: 0.3875141143798828
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 395
    operator: AOR
  number: 35
  status: incompetent
  tests_run: 101
  time: 0.4873528480529785
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 407
    operator: AOR
  number: 36
  status: incompetent
  tests_run: 149
  time: 0.6272263526916504
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 429
    operator: AOR
  number: 37
  status: survived
  tests_run: 316
  time: 0.7667791843414307
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F10E76E7C8>\nsource = 'del x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x000001F10E76E688>\nnode = <_ast.Delete object at 0x000001F10E76E6C8>\n\
    \n>   ???\nE   IndexError: list index out of range\n\nvisitors:498: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[del
    x]
  module: null
  mutations:
  - lineno: 498
    operator: AOR
  number: 38
  status: killed
  tests_run: 77
  time: 0.4517652988433838
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 502
    operator: AOR
  number: 39
  status: incompetent
  tests_run: 93
  time: 0.4675629138946533
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 505
    operator: AOR
  number: 40
  status: incompetent
  tests_run: 131
  time: 0.5206303596496582
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 549
    operator: AOR
  number: 41
  status: incompetent
  tests_run: 96
  time: 0.5901479721069336
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 613
    operator: AOR
  number: 42
  status: survived
  tests_run: 316
  time: 0.7722835540771484
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 650
    operator: AOR
  number: 43
  status: incompetent
  tests_run: 45
  time: 0.41149258613586426
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 657
    operator: AOR
  number: 44
  status: incompetent
  tests_run: 42
  time: 0.4038207530975342
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 664
    operator: AOR
  number: 45
  status: incompetent
  tests_run: 28
  time: 0.3954744338989258
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 768
    operator: AOR
  number: 46
  status: incompetent
  tests_run: 32
  time: 0.3994143009185791
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 863
    operator: AOR
  number: 47
  status: incompetent
  tests_run: 16
  time: 0.36362648010253906
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 877
    operator: AOR
  number: 48
  status: incompetent
  tests_run: 19
  time: 0.3709137439727783
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F10F362D48>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:823: in visit_With\n    ???\n_\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x000001F10F362A48>\n\
    node = <_ast.With object at 0x000001F10F362C08>, prefixes = []\n\n>   ???\nE \
    \  IndexError: list index out of range\n\nvisitors:916: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 916
    operator: AOR
  number: 49
  status: killed
  tests_run: 79
  time: 0.456589937210083
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F10DC02108>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:391: in visit_Expr\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:281: in generic_visit\n\
    \    self.visit(value)\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:1006:\
    \ in visit_JoinedStr\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x000001F10D4E8D08>\n\
    node = <_ast.FormattedValue object at 0x000001F10D78F988>\n\n>   ???\nE   OverflowError:\
    \ %c arg not in range(0x110000)\n\nvisitors:1013: OverflowError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1012
    operator: AOR
  number: 50
  status: killed
  tests_run: 154
  time: 0.6909618377685547
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 1013
    operator: AOR
  number: 51
  status: incompetent
  tests_run: 155
  time: 0.574751615524292
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 57
    operator: ASR
  number: 52
  status: incompetent
  tests_run: 1
  time: 0.3447415828704834
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001D31393C888>\n\n    def test_fix_linen_umbers(self):\n        \"\"\
    \"Check if an AST with wrong lineno attribute is corrected in the process.\"\"\
    \"\n        node = ast.parse('x = 1' + self.EOL + 'y = 2')\n        # set both\
    \ line numbers to 1\n        node.body[1].lineno = 1\n        to_source(node)\n\
    >       assert node.body[1].lineno == 2\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:411: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_fix_linen_umbers
  module: null
  mutations:
  - lineno: 177
    operator: ASR
  number: 53
  status: killed
  tests_run: 316
  time: 0.7957501411437988
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001D314B23248>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 228
    operator: ASR
  number: 54
  status: killed
  tests_run: 16
  time: 0.35601162910461426
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001D314B27708>\nsource = 'x = 1\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\nx = 1]
  module: null
  mutations:
  - lineno: 230
    operator: ASR
  number: 55
  status: killed
  tests_run: 11
  time: 0.3715541362762451
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 375
    operator: ASR
  number: 56
  status: incompetent
  tests_run: 37
  time: 0.4010312557220459
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000026904B37F88>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000026904B3F908>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    \        if sys.version_info >= (3, 8):\n            assert dot_node.get_label()\
    \ == 'ast.Constant(value=1, kind=None)'\n        else:\n>           assert dot_node.get_label()\
    \ == 'ast.Num(n=1)'\nE           AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:45: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: null
  mutations:
  - lineno: 32
    operator: COD
  number: 57
  status: killed
  tests_run: 3
  time: 0.3394954204559326
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000026904427BC8>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x00000269045FFB88>\n\n    def\
    \ test_has_edge(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n>       visitor.visit(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:25:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:21: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:279: in generic_visit\n    self.visit(item)\n\
    visitors:21: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\\
    lib\\ast.py:271: in visit\n    return visitor(node)\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:279: in generic_visit\n    self.visit(item)\n\
    visitors:18: in visit\n    ???\nvisitors:27: in _dot_node\n    ???\nvisitors:33:\
    \ in _dot_node_label\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.GraphNodeVisitor object\
    \ at 0x00000269045FFB88>, value = 'x'\n\n>   ???\nE   AttributeError: 'str' object\
    \ has no attribute 'parents'\n\nvisitors:41: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 39
    operator: COD
  number: 58
  status: killed
  tests_run: 1
  time: 0.3920152187347412
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000026905F13948>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000026905EBFB08>\n\n    def\
    \ test_edge_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_edge = visitor.graph.get_edge(str(node),\
    \ str(node.body[0]))[0]\n>       assert dot_edge.get_label() == 'body[0]'\nE \
    \      AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:53: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_edge_label
  module: null
  mutations:
  - lineno: 56
    operator: COD
  number: 59
  status: killed
  tests_run: 4
  time: 0.33950066566467285
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000269061378C8>\nsource = 'x = 1\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\nx = 1]
  module: null
  mutations:
  - lineno: 244
    operator: COD
  number: 60
  status: killed
  tests_run: 11
  time: 0.38153648376464844
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000026906217208>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:346: in visit\n    ???\nvisitors:251:\
    \ in correct_line_number\n    ???\nvisitors:254: in add_missing_lines\n    ???\n\
    visitors:222: in _newline_needed\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'visitors.SourceGeneratorNodeVisitorPython36'>\n\
    node = <_ast.Module object at 0x0000026906211E88>\n\n>   ???\nE   AttributeError:\
    \ 'Module' object has no attribute 'lineno'\n\nvisitors:206: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 244
    operator: COD
  number: 61
  status: killed
  tests_run: 6
  time: 0.349165678024292
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002690645AB88>\nsource = \"def f(x: 'x' = 0, *args: 'args', y: 'y' =\
    \ 1, **kwargs: 'kwargs') -> 'return':\\n    pass\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x: ''x'' = 0, *args: ''args'', y: ''y'' = 1, **kwargs: ''kwargs'') -> ''return'':\n    pass]'
  module: null
  mutations:
  - lineno: 321
    operator: COD
  number: 62
  status: killed
  tests_run: 139
  time: 0.5079329013824463
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000026906645B48>\nsource = \"def f(x: 'x' = 0, *args: 'args', y: 'y' =\
    \ 1, **kwargs: 'kwargs') -> 'return':\\n    pass\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x: ''x'' = 0, *args: ''args'', y: ''y'' = 1, **kwargs: ''kwargs'') -> ''return'':\n    pass]'
  module: null
  mutations:
  - lineno: 324
    operator: COD
  number: 63
  status: killed
  tests_run: 139
  time: 0.5155439376831055
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 491
    operator: COD
  number: 64
  status: survived
  tests_run: 316
  time: 0.8101353645324707
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000026906A360C8>\nsource = '(x, y) = z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x,
    y) = z]
  module: null
  mutations:
  - lineno: 618
    operator: COD
  number: 65
  status: killed
  tests_run: 7
  time: 0.3474996089935303
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000026906C1C9C8>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 674
    operator: COD
  number: 66
  status: killed
  tests_run: 44
  time: 0.398235559463501
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000026906C3DB48>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 675
    operator: COD
  number: 67
  status: killed
  tests_run: 47
  time: 0.4445955753326416
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000026906FB0B08>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 692
    operator: COD
  number: 68
  status: killed
  tests_run: 88
  time: 0.4593319892883301
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000018A1D5BED48>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000018A1D05F348>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n>       dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    E       IndexError: list index out of range\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:41:\
    \ IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: null
  mutations:
  - lineno: 17
    operator: COI
  number: 69
  status: killed
  tests_run: 3
  time: 0.34948182106018066
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000018A1E8E7688>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000018A1E8E7C88>\n\n    def\
    \ test_has_edge(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n>       visitor.visit(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:25:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:20: in visit\n    ???\nvisitors:52: in _dot_edge\n    ???\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.GraphNodeVisitor object at 0x0000018A1E8E7C88>\nnode =\
    \ <_ast.Module object at 0x0000018A1E8E7608>\n\n>   ???\nE   AttributeError: 'Module'\
    \ object has no attribute 'parent_field'\n\nvisitors:55: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 19
    operator: COI
  number: 70
  status: killed
  tests_run: 1
  time: 0.3818025588989258
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000018A1E9C49C8>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000018A1EB4B908>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    \        if sys.version_info >= (3, 8):\n            assert dot_node.get_label()\
    \ == 'ast.Constant(value=1, kind=None)'\n        else:\n>           assert dot_node.get_label()\
    \ == 'ast.Num(n=1)'\nE           AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:45: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: null
  mutations:
  - lineno: 32
    operator: COI
  number: 71
  status: killed
  tests_run: 3
  time: 0.3349900245666504
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000018A1D6F8808>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000018A1D32CA88>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    \        if sys.version_info >= (3, 8):\n            assert dot_node.get_label()\
    \ == 'ast.Constant(value=1, kind=None)'\n        else:\n>           assert dot_node.get_label()\
    \ == 'ast.Num(n=1)'\nE           AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:45: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: null
  mutations:
  - lineno: 34
    operator: COI
  number: 72
  status: killed
  tests_run: 3
  time: 0.37891507148742676
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000018A1EF03B88>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000018A1EF03DC8>\n\n    def\
    \ test_has_edge(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n>       visitor.visit(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:25:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:21: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:279: in generic_visit\n    self.visit(item)\n\
    visitors:21: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\\
    lib\\ast.py:271: in visit\n    return visitor(node)\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:279: in generic_visit\n    self.visit(item)\n\
    visitors:18: in visit\n    ???\nvisitors:27: in _dot_node\n    ???\nvisitors:33:\
    \ in _dot_node_label\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.GraphNodeVisitor object\
    \ at 0x0000018A1EF03DC8>, value = 'x'\n\n>   ???\nE   AttributeError: 'str' object\
    \ has no attribute 'parents'\n\nvisitors:41: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 39
    operator: COI
  number: 73
  status: killed
  tests_run: 1
  time: 0.3486049175262451
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000018A1E73F948>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000018A1E8E65C8>\n\n    def\
    \ test_multi_parents_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1\\nx = 2'))\n    \n        visitor.visit(node)\n    \n        dot_node =\
    \ visitor.graph.get_node(str(node.body[0].targets[0]))[0]\n>       assert dot_node.get_label()\
    \ == \"ast.Name(id='x', ctx=ast.Store())\"\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:61: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_multi_parents_node_label
  module: null
  mutations:
  - lineno: 41
    operator: COI
  number: 74
  status: killed
  tests_run: 5
  time: 0.38007259368896484
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000018A1D7216C8>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000018A1F29A5C8>\n\n    def\
    \ test_edge_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_edge = visitor.graph.get_edge(str(node),\
    \ str(node.body[0]))[0]\n>       assert dot_edge.get_label() == 'body[0]'\nE \
    \      AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:53: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_edge_label
  module: null
  mutations:
  - lineno: 56
    operator: COI
  number: 75
  status: killed
  tests_run: 4
  time: 0.3394956588745117
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1E9761C8>\nsource = 'x @ y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:391: in visit_Expr\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:281: in generic_visit\n\
    \    self.visit(value)\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n_ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n\
    self = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x0000018A1E714788>\n\
    node = <_ast.BinOp object at 0x0000018A1E976508>\n\n>   ???\nE   KeyError: <class\
    \ '_ast.MatMult'>\n\nvisitors:650: KeyError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    @ y]
  module: null
  mutations:
  - lineno: 90
    operator: COI
  number: 76
  status: killed
  tests_run: 153
  time: 0.611142635345459
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1F6523C8>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:135: in to_source\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\\
    lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:165: in generic_visit\n\
    \    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _\n\nself = <visitors.FixLinenoNodeVisitor object at 0x0000018A1F649508>\n\
    node = <_ast.Module object at 0x0000018A1F692688>\n\n>   ???\nE   AttributeError:\
    \ 'Module' object has no attribute 'lineno'\n\nvisitors:170: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 164
    operator: COI
  number: 77
  status: killed
  tests_run: 6
  time: 0.36351466178894043
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1F033B08>\n\n    def test_fix_linen_umbers(self):\n        \"\"\
    \"Check if an AST with wrong lineno attribute is corrected in the process.\"\"\
    \"\n        node = ast.parse('x = 1' + self.EOL + 'y = 2')\n        # set both\
    \ line numbers to 1\n        node.body[1].lineno = 1\n        to_source(node)\n\
    >       assert node.body[1].lineno == 2\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:411: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_fix_linen_umbers
  module: null
  mutations:
  - lineno: 166
    operator: COI
  number: 78
  status: killed
  tests_run: 316
  time: 0.8228511810302734
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1FC41908>\nsource = 'x = 1\\n\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\n\nx = 1]
  module: null
  mutations:
  - lineno: 170
    operator: COI
  number: 79
  status: killed
  tests_run: 12
  time: 0.35199713706970215
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1FA3FE48>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:271: in body\n    ???\nvisitors:251:\
    \ in correct_line_number\n    ???\nvisitors:254: in add_missing_lines\n    ???\n\
    visitors:222: in _newline_needed\n    ???\nvisitors:203: in _get_actual_lineno\n\
    \    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _\n\nnode = <_ast.Assign object at 0x0000018A1F72DA88>\n\n>   ???\n\
    E   AttributeError: 'Assign' object has no attribute 's'\n\nvisitors:215: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 202
    operator: COI
  number: 80
  status: killed
  tests_run: 6
  time: 0.35549163818359375
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2010C208>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n>       generated = to_source(node)\n\nsrc\\\
    tests\\astmonkeytests\\test_visitors.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvisitors:137: in to_source\n\
    \    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:352: in\
    \ visit_Module\n    ???\nvisitors:271: in body\n    ???\nvisitors:251: in correct_line_number\n\
    \    ???\nvisitors:254: in add_missing_lines\n    ???\nvisitors:222: in _newline_needed\n\
    \    ???\nvisitors:203: in _get_actual_lineno\n    ???\n_ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Expr\
    \ object at 0x0000018A2010C608>\n\n>   ???\nE   AttributeError: 'Expr' object\
    \ has no attribute 's'\n\nvisitors:215: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 212
    operator: COI
  number: 81
  status: killed
  tests_run: 121
  time: 0.5073177814483643
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A202D4088>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n>       generated = to_source(node)\n\nsrc\\\
    tests\\astmonkeytests\\test_visitors.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvisitors:137: in to_source\n\
    \    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:352: in\
    \ visit_Module\n    ???\nvisitors:271: in body\n    ???\nvisitors:251: in correct_line_number\n\
    \    ???\nvisitors:254: in add_missing_lines\n    ???\nvisitors:222: in _newline_needed\n\
    \    ???\nvisitors:203: in _get_actual_lineno\n    ???\n_ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Expr\
    \ object at 0x0000018A202D4108>\n\n>   ???\nE   AttributeError: 'str' object has\
    \ no attribute 'decode'\n\nvisitors:217: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 216
    operator: COI
  number: 82
  status: killed
  tests_run: 121
  time: 0.6234300136566162
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A206E07C8>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 234
    operator: COI
  number: 83
  status: killed
  tests_run: 6
  time: 0.4724738597869873
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A208AB2C8>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 237
    operator: COI
  number: 84
  status: killed
  tests_run: 6
  time: 0.40454816818237305
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A202E2308>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:346: in visit\n    ???\nvisitors:251:\
    \ in correct_line_number\n    ???\nvisitors:254: in add_missing_lines\n    ???\n\
    visitors:222: in _newline_needed\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'visitors.SourceGeneratorNodeVisitorPython36'>\n\
    node = <_ast.Module object at 0x0000018A1FA3FA08>\n\n>   ???\nE   AttributeError:\
    \ 'Module' object has no attribute 'lineno'\n\nvisitors:206: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 244
    operator: COI
  number: 85
  status: killed
  tests_run: 6
  time: 0.4793131351470947
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A20C45308>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 246
    operator: COI
  number: 86
  status: killed
  tests_run: 6
  time: 0.42340636253356934
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 254
    operator: COI
  number: 87
  status: timeout
  tests_run: null
  time: 7.207890272140503
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1FF710C8>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 258
    operator: COI
  number: 88
  status: killed
  tests_run: 6
  time: 0.3675096035003662
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1FCB9E88>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 263
    operator: COI
  number: 89
  status: killed
  tests_run: 6
  time: 0.4262261390686035
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A20A26188>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 268
    operator: COI
  number: 90
  status: killed
  tests_run: 6
  time: 0.3474917411804199
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A216D7408>\nsource = 'while not (i != 1):\\n    x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:473: in visit_While\n    ???\n\
    visitors:277: in body_or_else\n    ???\nvisitors:286: in or_else\n    ???\n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    \nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x0000018A216D7048>\n\
    keyword = 'else:', body = []\n\n>   ???\nE   IndexError: list index out of range\n\
    \nvisitors:280: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    not (i != 1):\n    x = 1]
  module: null
  mutations:
  - lineno: 276
    operator: COI
  number: 91
  status: killed
  tests_run: 65
  time: 0.5312788486480713
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2176C608>\nsource = 'if x:\\n    pass\\nelse:\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelse:\n    pass]
  module: null
  mutations:
  - lineno: 280
    operator: COI
  number: 92
  status: killed
  tests_run: 53
  time: 0.4565601348876953
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A21BA7588>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:878:\
    \ in visit_FunctionDef\n    ???\nvisitors:299: in signature\n    ???\nvisitors:312:\
    \ in signature_arg\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:275: in generic_visit\n\
    \    for field, value in iter_fields(node):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = None\n\n    def iter_fields(node):\n\
    \        \"\"\"\n        Yield a tuple of ``(fieldname, value)`` for each field\
    \ in ``node._fields``\n        that is present on *node*.\n        \"\"\"\n> \
    \      for field in node._fields:\nE       AttributeError: 'NoneType' object has\
    \ no attribute '_fields'\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\\
    ast.py:186: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 310
    operator: COI
  number: 93
  status: killed
  tests_run: 24
  time: 0.48436474800109863
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A214B7588>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:878: in visit_FunctionDef\n   \
    \ ???\nvisitors:299: in signature\n    ???\nvisitors:315: in signature_arg\n \
    \   ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:275: in generic_visit\n    for field,\
    \ value in iter_fields(node):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = None\n\n    def iter_fields(node):\n\
    \        \"\"\"\n        Yield a tuple of ``(fieldname, value)`` for each field\
    \ in ``node._fields``\n        that is present on *node*.\n        \"\"\"\n> \
    \      for field in node._fields:\nE       AttributeError: 'NoneType' object has\
    \ no attribute '_fields'\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\\
    ast.py:186: AttributeError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 313
    operator: COI
  number: 94
  status: killed
  tests_run: 137
  time: 0.5438704490661621
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A20C95748>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:878:\
    \ in visit_FunctionDef\n    ???\nvisitors:299: in signature\n    ???\nvisitors:318:\
    \ in signature_arg\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:275: in generic_visit\n\
    \    for field, value in iter_fields(node):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = None\n\n    def iter_fields(node):\n\
    \        \"\"\"\n        Yield a tuple of ``(fieldname, value)`` for each field\
    \ in ``node._fields``\n        that is present on *node*.\n        \"\"\"\n> \
    \      for field in node._fields:\nE       AttributeError: 'NoneType' object has\
    \ no attribute '_fields'\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\\
    ast.py:186: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 316
    operator: COI
  number: 95
  status: killed
  tests_run: 24
  time: 0.49928712844848633
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A218C5088>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 321
    operator: COI
  number: 96
  status: killed
  tests_run: 19
  time: 0.3627631664276123
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A221BC248>\nsource = \"def f(x: 'x' = 0, *args: 'args', y: 'y' =\
    \ 1, **kwargs: 'kwargs') -> 'return':\\n    pass\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x: ''x'' = 0, *args: ''args'', y: ''y'' = 1, **kwargs: ''kwargs'') -> ''return'':\n    pass]'
  module: null
  mutations:
  - lineno: 324
    operator: COI
  number: 97
  status: killed
  tests_run: 139
  time: 0.6351544857025146
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A21ED0D48>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:878: in visit_FunctionDef\n   \
    \ ???\nvisitors:301: in signature\n    ???\nvisitors:336: in signature_spec_arg\n\
    \    ???\nvisitors:308: in signature_arg\n    ???\nvisitors:347: in visit\n  \
    \  ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n\
    \    return visitor(node)\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\\
    ast.py:275: in generic_visit\n    for field, value in iter_fields(node):\n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    \nnode = None\n\n    def iter_fields(node):\n        \"\"\"\n        Yield a tuple\
    \ of ``(fieldname, value)`` for each field in ``node._fields``\n        that is\
    \ present on *node*.\n        \"\"\"\n>       for field in node._fields:\nE  \
    \     AttributeError: 'NoneType' object has no attribute '_fields'\n\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:186: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 333
    operator: COI
  number: 98
  status: killed
  tests_run: 19
  time: 0.39321327209472656
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A20304348>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:878:\
    \ in visit_FunctionDef\n    ???\nvisitors:301: in signature\n    ???\n_ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n\
    self = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x0000018A203047C8>\n\
    node = <_ast.arguments object at 0x0000018A20AE9DC8>, var = 'vararg'\nwrite_comma\
    \ = <astmonkey.utils.CommaWriter object at 0x0000018A20B29BC8>\nprefix = '*'\n\
    \n>   ???\nE   AttributeError: 'arguments' object has no attribute 'varargannotation'\n\
    \nvisitors:335: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 334
    operator: COI
  number: 99
  status: killed
  tests_run: 24
  time: 0.5004980564117432
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1E808D48>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 339
    operator: COI
  number: 100
  status: killed
  tests_run: 16
  time: 0.3595163822174072
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A210D2288>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 357
    operator: COI
  number: 101
  status: killed
  tests_run: 6
  time: 0.35571742057800293
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 374
    operator: COI
  number: 102
  status: incompetent
  tests_run: 35
  time: 0.39941883087158203
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1FC192C8>\nsource = 'def f():\\n    yield'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:884: in visit_FunctionDef\n   \
    \ ???\nvisitors:272: in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:389: in visit_Expr\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x0000018A1F82F388>\nnode = <_ast.Yield object at 0x0000018A20893F08>\n\
    \n>   ???\nE   AttributeError: 'Yield' object has no attribute 's'\n\nvisitors:289:\
    \ AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield]
  module: null
  mutations:
  - lineno: 388
    operator: COI
  number: 103
  status: killed
  tests_run: 29
  time: 0.3917393684387207
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1D6BF508>\nsource = \"f(b='c')\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(b='c')]
  module: null
  mutations:
  - lineno: 394
    operator: COI
  number: 104
  status: killed
  tests_run: 101
  time: 0.47136974334716797
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A22354B48>\nsource = 'for x in y:\\n    break'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[for
    x in y:\n    break]
  module: null
  mutations:
  - lineno: 414
    operator: COI
  number: 105
  status: killed
  tests_run: 69
  time: 0.43830251693725586
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 421
    operator: COI
  number: 106
  status: survived
  tests_run: 316
  time: 0.8871159553527832
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1FB38B48>\nsource = 'if x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass]
  module: null
  mutations:
  - lineno: 441
    operator: COI
  number: 107
  status: killed
  tests_run: 52
  time: 0.4125075340270996
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A21CB69C8>\nsource = 'if x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:437: in visit_If\n    ???\nvisitors:449:\
    \ in if_elif\n    ???\nvisitors:455: in if_or_else\n    ???\nvisitors:286: in\
    \ or_else\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x0000018A1D480FC8>\nkeyword = 'else:', body = []\n\n>   ???\nE  \
    \ IndexError: list index out of range\n\nvisitors:280: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass]
  module: null
  mutations:
  - lineno: 448
    operator: COI
  number: 108
  status: killed
  tests_run: 52
  time: 0.43137550354003906
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2282E248>\nsource = 'if x:\\n    pass\\nelse:\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:437:\
    \ in visit_If\n    ???\nvisitors:449: in if_elif\n    ???\nvisitors:453: in if_or_else\n\
    \    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at\
    \ 0x0000018A22830148>\nnode = <_ast.Pass object at 0x0000018A2282EE48>, use_elif\
    \ = True\n\n>   ???\nE   AttributeError: 'Pass' object has no attribute 'test'\n\
    \nvisitors:445: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelse:\n    pass]
  module: null
  mutations:
  - lineno: 452
    operator: COI
  number: 109
  status: killed
  tests_run: 53
  time: 0.5875825881958008
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 482
    operator: COI
  number: 110
  status: survived
  tests_run: 316
  time: 0.7702662944793701
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 487
    operator: COI
  number: 111
  status: survived
  tests_run: 316
  time: 0.7669413089752197
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 491
    operator: COI
  number: 112
  status: survived
  tests_run: 316
  time: 0.7640650272369385
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1FAD72C8>\nsource = 'del x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[del
    x]
  module: null
  mutations:
  - lineno: 498
    operator: COI
  number: 113
  status: killed
  tests_run: 77
  time: 0.5807638168334961
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A223DC288>\nsource = 'def f():\\n    return'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:884: in visit_FunctionDef\n   \
    \ ???\nvisitors:272: in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:512: in visit_Return\n    ???\nvisitors:347: in visit\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return\
    \ visitor(node)\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:275:\
    \ in generic_visit\n    for field, value in iter_fields(node):\n_ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode =\
    \ None\n\n    def iter_fields(node):\n        \"\"\"\n        Yield a tuple of\
    \ ``(fieldname, value)`` for each field in ``node._fields``\n        that is present\
    \ on *node*.\n        \"\"\"\n>       for field in node._fields:\nE       AttributeError:\
    \ 'NoneType' object has no attribute '_fields'\n\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:186: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return]
  module: null
  mutations:
  - lineno: 510
    operator: COI
  number: 114
  status: killed
  tests_run: 26
  time: 0.41141700744628906
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A22D64B08>\nsource = 'raise Exception()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception()]
  module: null
  mutations:
  - lineno: 523
    operator: COI
  number: 115
  status: killed
  tests_run: 94
  time: 0.47536635398864746
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 525
    operator: COI
  number: 116
  status: survived
  tests_run: 316
  time: 0.7753016948699951
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 531
    operator: COI
  number: 117
  status: survived
  tests_run: 316
  time: 0.7708148956298828
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 534
    operator: COI
  number: 118
  status: survived
  tests_run: 316
  time: 0.7677419185638428
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2128F988>\nsource = 'raise Exception()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:524: in visit_Raise\n    ???\n\
    visitors:543: in raise_exc\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:275: in generic_visit\n\
    \    for field, value in iter_fields(node):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = None\n\n    def iter_fields(node):\n\
    \        \"\"\"\n        Yield a tuple of ``(fieldname, value)`` for each field\
    \ in ``node._fields``\n        that is present on *node*.\n        \"\"\"\n> \
    \      for field in node._fields:\nE       AttributeError: 'NoneType' object has\
    \ no attribute '_fields'\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\\
    ast.py:186: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception()]
  module: null
  mutations:
  - lineno: 541
    operator: COI
  number: 119
  status: killed
  tests_run: 94
  time: 0.4992852210998535
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 556
    operator: COI
  number: 120
  status: survived
  tests_run: 316
  time: 0.7709357738494873
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 560
    operator: COI
  number: 121
  status: survived
  tests_run: 316
  time: 0.7675435543060303
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1FC67808>\nsource = '(x, y) = z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x,
    y) = z]
  module: null
  mutations:
  - lineno: 615
    operator: COI
  number: 122
  status: killed
  tests_run: 7
  time: 0.35149693489074707
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A22A8A108>\nsource = '(x, y) = z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x,
    y) = z]
  module: null
  mutations:
  - lineno: 618
    operator: COI
  number: 123
  status: killed
  tests_run: 7
  time: 0.34857869148254395
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A20520288>\nsource = '[1, 2, 3]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[[1,
    2, 3]]
  module: null
  mutations:
  - lineno: 625
    operator: COI
  number: 124
  status: killed
  tests_run: 106
  time: 0.4890453815460205
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A21019D48>\nsource = \"{a: 3, b: 'c'}\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{a:
    3, b: ''c''}]'
  module: null
  mutations:
  - lineno: 638
    operator: COI
  number: 125
  status: killed
  tests_run: 108
  time: 0.48735475540161133
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A22D4DE48>\nsource = \"{a: 3, b: 'c'}\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{a:
    3, b: ''c''}]'
  module: null
  mutations:
  - lineno: 640
    operator: COI
  number: 126
  status: killed
  tests_run: 108
  time: 0.475416898727417
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1ED3C508>\nsource = '(x and y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    and y)]
  module: null
  mutations:
  - lineno: 656
    operator: COI
  number: 127
  status: killed
  tests_run: 42
  time: 0.4034273624420166
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2052A508>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 671
    operator: COI
  number: 128
  status: killed
  tests_run: 44
  time: 0.39938783645629883
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A22124508>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 690
    operator: COI
  number: 129
  status: killed
  tests_run: 88
  time: 0.45749974250793457
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A23D20D88>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 692
    operator: COI
  number: 130
  status: killed
  tests_run: 88
  time: 0.4706594944000244
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A219BA0C8>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 696
    operator: COI
  number: 131
  status: killed
  tests_run: 88
  time: 0.4633455276489258
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1FD34908>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 700
    operator: COI
  number: 132
  status: killed
  tests_run: 88
  time: 0.46733927726745605
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A20EC5B88>\nsource = 'x[1:2,3:4]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[1:2,3:4]]
  module: null
  mutations:
  - lineno: 705
    operator: COI
  number: 133
  status: killed
  tests_run: 89
  time: 0.4587984085083008
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A22EBD508>\nsource = 'def f():\\n    yield'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:884: in visit_FunctionDef\n   \
    \ ???\nvisitors:272: in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:391: in visit_Expr\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\\
    lib\\ast.py:281: in generic_visit\n    self.visit(value)\nvisitors:347: in visit\n\
    \    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n\
    \    return visitor(node)\nvisitors:713: in visit_Yield\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\\
    lib\\ast.py:275: in generic_visit\n    for field, value in iter_fields(node):\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nnode = None\n\n    def iter_fields(node):\n        \"\"\"\n        Yield\
    \ a tuple of ``(fieldname, value)`` for each field in ``node._fields``\n     \
    \   that is present on *node*.\n        \"\"\"\n>       for field in node._fields:\n\
    E       AttributeError: 'NoneType' object has no attribute '_fields'\n\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:186: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield]
  module: null
  mutations:
  - lineno: 711
    operator: COI
  number: 134
  status: killed
  tests_run: 29
  time: 0.4039442539215088
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 767
    operator: COI
  number: 135
  status: incompetent
  tests_run: 31
  time: 0.4062821865081787
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2221B4C8>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 775
    operator: COI
  number: 136
  status: killed
  tests_run: 109
  time: 0.4998345375061035
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A234AB948>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 782
    operator: COI
  number: 137
  status: killed
  tests_run: 71
  time: 0.4364809989929199
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2610E888>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:902:\
    \ in visit_Try\n    ???\nvisitors:812: in try_handlers\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:787: in visit_ExceptHandler\n \
    \   ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:275: in generic_visit\n    for field,\
    \ value in iter_fields(node):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = None\n\n    def iter_fields(node):\n\
    \        \"\"\"\n        Yield a tuple of ``(fieldname, value)`` for each field\
    \ in ``node._fields``\n        that is present on *node*.\n        \"\"\"\n> \
    \      for field in node._fields:\nE       AttributeError: 'NoneType' object has\
    \ no attribute '_fields'\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\\
    ast.py:186: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 785
    operator: COI
  number: 138
  status: killed
  tests_run: 71
  time: 0.45535922050476074
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A222CBBC8>\nsource = \"assert True, 'message'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[assert
    True, 'message']
  module: null
  mutations:
  - lineno: 797
    operator: COI
  number: 139
  status: killed
  tests_run: 81
  time: 0.4565763473510742
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 804
    operator: COI
  number: 140
  status: survived
  tests_run: 316
  time: 0.775519609451294
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 806
    operator: COI
  number: 141
  status: survived
  tests_run: 316
  time: 0.8046712875366211
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 829
    operator: COI
  number: 142
  status: survived
  tests_run: 316
  time: 0.7630202770233154
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2239F348>\nsource = 'class A(B, C):\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    A(B, C):\n    pass]
  module: null
  mutations:
  - lineno: 855
    operator: COI
  number: 143
  status: killed
  tests_run: 22
  time: 0.3632485866546631
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A204A8788>\nsource = 'class X(Y, metaclass=Z):\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    X(Y, metaclass=Z):\n    pass]
  module: null
  mutations:
  - lineno: 867
    operator: COI
  number: 144
  status: killed
  tests_run: 136
  time: 0.5283405780792236
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A23E3D108>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:882: in visit_FunctionDef\n   \
    \ ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:275: in generic_visit\n    for field,\
    \ value in iter_fields(node):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = None\n\n    def iter_fields(node):\n\
    \        \"\"\"\n        Yield a tuple of ``(fieldname, value)`` for each field\
    \ in ``node._fields``\n        that is present on *node*.\n        \"\"\"\n> \
    \      for field in node._fields:\nE       AttributeError: 'NoneType' object has\
    \ no attribute '_fields'\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\\
    ast.py:186: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 880
    operator: COI
  number: 145
  status: killed
  tests_run: 19
  time: 0.3903524875640869
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A20A30F88>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 901
    operator: COI
  number: 146
  status: killed
  tests_run: 71
  time: 0.4475252628326416
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A26730288>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:904:\
    \ in visit_Try\n    ???\nvisitors:820: in final_body\n    ???\n_ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x0000018A2672A4C8>\nkeyword = 'finally:', body = []\n\n>   ???\n\
    E   IndexError: list index out of range\n\nvisitors:280: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 903
    operator: COI
  number: 147
  status: killed
  tests_run: 71
  time: 0.4468059539794922
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A1F5DBC48>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:906:\
    \ in visit_Try\n    ???\nvisitors:286: in or_else\n    ???\n_ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x0000018A2615EB08>\nkeyword = 'else:', body = []\n\n>   ???\nE  \
    \ IndexError: list index out of range\n\nvisitors:280: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 905
    operator: COI
  number: 148
  status: killed
  tests_run: 71
  time: 0.4507014751434326
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A23D45EC8>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:823: in visit_With\n    ???\nvisitors:915:\
    \ in with_body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:275: in generic_visit\n\
    \    for field, value in iter_fields(node):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = None\n\n    def iter_fields(node):\n\
    \        \"\"\"\n        Yield a tuple of ``(fieldname, value)`` for each field\
    \ in ``node._fields``\n        that is present on *node*.\n        \"\"\"\n> \
    \      for field in node._fields:\nE       AttributeError: 'NoneType' object has\
    \ no attribute '_fields'\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\\
    ast.py:186: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 913
    operator: COI
  number: 149
  status: killed
  tests_run: 79
  time: 0.4760434627532959
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A23082E88>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 916
    operator: COI
  number: 150
  status: killed
  tests_run: 79
  time: 0.7514824867248535
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A22920388>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:359: in visit_Assign\n    ???\n\
    visitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\\
    lib\\ast.py:271: in visit\n    return visitor(node)\n_ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x0000018A1F23DCC8>\nnode = <_ast.Name object at 0x0000018A1F23D608>\n\
    \n>   ???\nE   AttributeError: 'str' object has no attribute 'arg'\n\nvisitors:934:\
    \ AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 933
    operator: COI
  number: 151
  status: killed
  tests_run: 6
  time: 0.3688983917236328
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A22016E08>\nsource = 'async def f():\\n    await asyncio.sleep(1)'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    await asyncio.sleep(1)]
  module: null
  mutations:
  - lineno: 957
    operator: COI
  number: 152
  status: killed
  tests_run: 151
  time: 0.5459752082824707
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A26441548>\nsource = 'f(a, b=1, *args, **kwargs)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(a,
    b=1, *args, **kwargs)]
  module: null
  mutations:
  - lineno: 972
    operator: COI
  number: 153
  status: killed
  tests_run: 104
  time: 0.5080738067626953
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A25ECE8C8>\nsource = 'f(a, b=1, *args, **kwargs)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(a,
    b=1, *args, **kwargs)]
  module: null
  mutations:
  - lineno: 983
    operator: COI
  number: 154
  status: killed
  tests_run: 104
  time: 0.5143864154815674
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A259BD9C8>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1000
    operator: COI
  number: 155
  status: killed
  tests_run: 154
  time: 0.580275297164917
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A26E100C8>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:391: in visit_Expr\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:281: in generic_visit\n\
    \    self.visit(value)\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n_ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n\
    self = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x0000018A26E1BC48>\n\
    node = <_ast.JoinedStr object at 0x0000018A26E102C8>\n\n>   ???\nE   AttributeError:\
    \ 'FormattedValue' object has no attribute 's'\n\nvisitors:1004: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1003
    operator: COI
  number: 156
  status: killed
  tests_run: 154
  time: 0.5632472038269043
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2230C948>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1009
    operator: COI
  number: 157
  status: killed
  tests_run: 154
  time: 0.5512189865112305
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000018A2700B088>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:391: in visit_Expr\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:281: in generic_visit\n\
    \    self.visit(value)\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:1006:\
    \ in visit_JoinedStr\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x0000018A241ECE08>\n\
    node = <_ast.FormattedValue object at 0x0000018A25F8A848>\n\n>   ???\nE   OverflowError:\
    \ %c arg not in range(0x110000)\n\nvisitors:1013: OverflowError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1012
    operator: COI
  number: 158
  status: killed
  tests_run: 154
  time: 0.5752298831939697
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000025273360C08>\n\
    \n    @pytest.fixture\n    def visitor(self):\n>       return GraphNodeVisitor()\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvisitors:14: in __init__\n\
    \    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\site-packages\\\
    pydot.py:1698: in __init__\n    Graph.__init__(self, *argsl, **argsd)\n_ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n\
    self = <pydot.Dot object at 0x0000025273360D48>, graph_name = 'G'\nobj_dict =\
    \ None, graph_type = 'mutpy', strict = False\nsuppress_disconnected = False, simplify\
    \ = False, attrs = {}\n\n    def __init__(self, graph_name='G', obj_dict=None,\n\
    \                 graph_type='digraph', strict=False,\n                 suppress_disconnected=False,\
    \ simplify=False, **attrs):\n    \n        if obj_dict is not None:\n        \
    \    self.obj_dict = obj_dict\n    \n        else:\n    \n            self.obj_dict\
    \ = dict()\n    \n            self.obj_dict['attributes'] = dict(attrs)\n    \n\
    \            if graph_type not in ['graph', 'digraph']:\n                raise\
    \ Error((\n                    'Invalid type \"{t}\". '\n                    'Accepted\
    \ graph types are: '\n>                   'graph, digraph').format(t=graph_type))\n\
    E               pydot.Error: Invalid type \"mutpy\". Accepted graph types are:\
    \ graph, digraph\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\site-packages\\\
    pydot.py:934: Error"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 14
    operator: CRP
  number: 159
  status: killed
  tests_run: 1
  time: 0.36356639862060547
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000252734B4688>\n\
    \n    @pytest.fixture\n    def visitor(self):\n>       return GraphNodeVisitor()\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvisitors:14: in __init__\n\
    \    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\site-packages\\\
    pydot.py:1698: in __init__\n    Graph.__init__(self, *argsl, **argsd)\n_ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n\
    self = <pydot.Dot object at 0x00000252734B4988>, graph_name = 'G'\nobj_dict =\
    \ None, graph_type = '', strict = False, suppress_disconnected = False\nsimplify\
    \ = False, attrs = {}\n\n    def __init__(self, graph_name='G', obj_dict=None,\n\
    \                 graph_type='digraph', strict=False,\n                 suppress_disconnected=False,\
    \ simplify=False, **attrs):\n    \n        if obj_dict is not None:\n        \
    \    self.obj_dict = obj_dict\n    \n        else:\n    \n            self.obj_dict\
    \ = dict()\n    \n            self.obj_dict['attributes'] = dict(attrs)\n    \n\
    \            if graph_type not in ['graph', 'digraph']:\n                raise\
    \ Error((\n                    'Invalid type \"{t}\". '\n                    'Accepted\
    \ graph types are: '\n>                   'graph, digraph').format(t=graph_type))\n\
    E               pydot.Error: Invalid type \"\". Accepted graph types are: graph,\
    \ digraph\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\site-packages\\\
    pydot.py:934: Error"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 14
    operator: CRP
  number: 160
  status: killed
  tests_run: 1
  time: 0.391920804977417
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 17
    operator: CRP
  number: 161
  status: survived
  tests_run: 316
  time: 0.7708332538604736
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000025274935688>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000025274935A08>\n\n    def\
    \ test_has_edge(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n>       assert visitor.graph.get_edge(str(node),\
    \ str(node.body[0]))\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:27:\
    \ AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 19
    operator: CRP
  number: 162
  status: killed
  tests_run: 1
  time: 0.35552239418029785
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000252734D4688>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000025274B0D988>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    \        if sys.version_info >= (3, 8):\n            assert dot_node.get_label()\
    \ == 'ast.Constant(value=1, kind=None)'\n        else:\n>           assert dot_node.get_label()\
    \ == 'ast.Num(n=1)'\nE           AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:45: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: null
  mutations:
  - lineno: 35
    operator: CRP
  number: 163
  status: killed
  tests_run: 3
  time: 0.33073973655700684
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000025274B01E08>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000025274D0EA08>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    \        if sys.version_info >= (3, 8):\n            assert dot_node.get_label()\
    \ == 'ast.Constant(value=1, kind=None)'\n        else:\n>           assert dot_node.get_label()\
    \ == 'ast.Num(n=1)'\nE           AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:45: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: null
  mutations:
  - lineno: 35
    operator: CRP
  number: 164
  status: killed
  tests_run: 3
  time: 0.33695125579833984
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000025274D0A9C8>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000025274EE2548>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    \        if sys.version_info >= (3, 8):\n            assert dot_node.get_label()\
    \ == 'ast.Constant(value=1, kind=None)'\n        else:\n>           assert dot_node.get_label()\
    \ == 'ast.Num(n=1)'\nE           AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:45: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: null
  mutations:
  - lineno: 36
    operator: CRP
  number: 165
  status: killed
  tests_run: 3
  time: 0.3395366668701172
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000025274F08E88>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000025274953108>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    \        if sys.version_info >= (3, 8):\n            assert dot_node.get_label()\
    \ == 'ast.Constant(value=1, kind=None)'\n        else:\n>           assert dot_node.get_label()\
    \ == 'ast.Num(n=1)'\nE           AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:45: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: null
  mutations:
  - lineno: 36
    operator: CRP
  number: 166
  status: killed
  tests_run: 3
  time: 0.36749815940856934
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x000002527505B108>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x000002527522F3C8>\n\n    def\
    \ test_multi_parents_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1\\nx = 2'))\n    \n        visitor.visit(node)\n    \n        dot_node =\
    \ visitor.graph.get_node(str(node.body[0].targets[0]))[0]\n>       assert dot_node.get_label()\
    \ == \"ast.Name(id='x', ctx=ast.Store())\"\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:61: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_multi_parents_node_label
  module: null
  mutations:
  - lineno: 36
    operator: CRP
  number: 167
  status: killed
  tests_run: 5
  time: 0.3388347625732422
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x0000025275292D48>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x00000252754106C8>\n\n    def\
    \ test_multi_parents_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1\\nx = 2'))\n    \n        visitor.visit(node)\n    \n        dot_node =\
    \ visitor.graph.get_node(str(node.body[0].targets[0]))[0]\n>       assert dot_node.get_label()\
    \ == \"ast.Name(id='x', ctx=ast.Store())\"\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:61: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_multi_parents_node_label
  module: null
  mutations:
  - lineno: 36
    operator: CRP
  number: 168
  status: killed
  tests_run: 5
  time: 0.3407320976257324
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 41
    operator: CRP
  number: 169
  status: survived
  tests_run: 316
  time: 0.8188591003417969
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 47
    operator: CRP
  number: 170
  status: survived
  tests_run: 316
  time: 0.7704033851623535
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 47
    operator: CRP
  number: 171
  status: survived
  tests_run: 316
  time: 0.7669053077697754
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 48
    operator: CRP
  number: 172
  status: survived
  tests_run: 316
  time: 0.76509690284729
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 48
    operator: CRP
  number: 173
  status: survived
  tests_run: 316
  time: 0.8296749591827393
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 47
    operator: CRP
  number: 174
  status: survived
  tests_run: 316
  time: 0.7641315460205078
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 47
    operator: CRP
  number: 175
  status: survived
  tests_run: 316
  time: 0.7591738700866699
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 48
    operator: CRP
  number: 176
  status: survived
  tests_run: 316
  time: 0.8348355293273926
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 48
    operator: CRP
  number: 177
  status: survived
  tests_run: 316
  time: 0.7631556987762451
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x000002527683F788>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000025276A7A848>\n\n    def\
    \ test_edge_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_edge = visitor.graph.get_edge(str(node),\
    \ str(node.body[0]))[0]\n>       assert dot_edge.get_label() == 'body[0]'\nE \
    \      AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:53: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_edge_label
  module: null
  mutations:
  - lineno: 57
    operator: CRP
  number: 178
  status: killed
  tests_run: 4
  time: 0.3395354747772217
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000252767DE3C8>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x0000025276C47648>\n\n    def\
    \ test_edge_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n        dot_edge = visitor.graph.get_edge(str(node),\
    \ str(node.body[0]))[0]\n>       assert dot_edge.get_label() == 'body[0]'\nE \
    \      AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:53: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_edge_label
  module: null
  mutations:
  - lineno: 57
    operator: CRP
  number: 179
  status: killed
  tests_run: 4
  time: 0.33875513076782227
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 62
    operator: CRP
  number: 180
  status: survived
  tests_run: 316
  time: 0.76806640625
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 62
    operator: CRP
  number: 181
  status: survived
  tests_run: 316
  time: 0.76509690284729
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 62
    operator: CRP
  number: 182
  status: survived
  tests_run: 316
  time: 0.8495137691497803
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 62
    operator: CRP
  number: 183
  status: survived
  tests_run: 316
  time: 0.7553365230560303
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 68
    operator: CRP
  number: 184
  status: survived
  tests_run: 316
  time: 0.7669839859008789
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 68
    operator: CRP
  number: 185
  status: survived
  tests_run: 316
  time: 0.7600452899932861
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277CAB088>\nsource = '(x and y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    and y)]
  module: null
  mutations:
  - lineno: 71
    operator: CRP
  number: 186
  status: killed
  tests_run: 42
  time: 0.3875234127044678
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277E8AC88>\nsource = '(x and y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    and y)]
  module: null
  mutations:
  - lineno: 71
    operator: CRP
  number: 187
  status: killed
  tests_run: 42
  time: 0.3848879337310791
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 72
    operator: CRP
  number: 188
  status: survived
  tests_run: 316
  time: 0.8838849067687988
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 72
    operator: CRP
  number: 189
  status: survived
  tests_run: 316
  time: 0.7604904174804688
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025274604808>\nsource = 'x += 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    += 1]
  module: null
  mutations:
  - lineno: 76
    operator: CRP
  number: 190
  status: killed
  tests_run: 8
  time: 0.34749364852905273
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025273302B88>\nsource = 'x += 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    += 1]
  module: null
  mutations:
  - lineno: 76
    operator: CRP
  number: 191
  status: killed
  tests_run: 8
  time: 0.3474869728088379
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527815E588>\nsource = 'lambda x: (((x ** 2) + (2 * x)) - 5)'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (((x ** 2) + (2 * x)) - 5)]'
  module: null
  mutations:
  - lineno: 77
    operator: CRP
  number: 192
  status: killed
  tests_run: 84
  time: 0.44789910316467285
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252783785C8>\nsource = 'lambda x: (((x ** 2) + (2 * x)) - 5)'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (((x ** 2) + (2 * x)) - 5)]'
  module: null
  mutations:
  - lineno: 77
    operator: CRP
  number: 193
  status: killed
  tests_run: 84
  time: 0.45052266120910645
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527852C4C8>\nsource = 'y * (z if z > 1 else 1)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[y
    * (z if z > 1 else 1)]
  module: null
  mutations:
  - lineno: 78
    operator: CRP
  number: 194
  status: killed
  tests_run: 60
  time: 0.41252779960632324
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527874B588>\nsource = 'y * (z if z > 1 else 1)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[y
    * (z if z > 1 else 1)]
  module: null
  mutations:
  - lineno: 78
    operator: CRP
  number: 195
  status: killed
  tests_run: 60
  time: 0.4107029438018799
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252789940C8>\nsource = '(x + y) / z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    + y) / z]
  module: null
  mutations:
  - lineno: 79
    operator: CRP
  number: 196
  status: killed
  tests_run: 46
  time: 0.4005553722381592
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278142EC8>\nsource = '(x + y) / z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    + y) / z]
  module: null
  mutations:
  - lineno: 79
    operator: CRP
  number: 197
  status: killed
  tests_run: 46
  time: 0.539226770401001
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527803C148>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 80
    operator: CRP
  number: 198
  status: killed
  tests_run: 47
  time: 0.395632266998291
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252757B1888>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 80
    operator: CRP
  number: 199
  status: killed
  tests_run: 47
  time: 0.3946802616119385
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527526F988>\nsource = \"'a %s' % 'b'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['a
    %s' % 'b']
  module: null
  mutations:
  - lineno: 81
    operator: CRP
  number: 200
  status: killed
  tests_run: 95
  time: 0.4633350372314453
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025274D0EF88>\nsource = \"'a %s' % 'b'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['a
    %s' % 'b']
  module: null
  mutations:
  - lineno: 81
    operator: CRP
  number: 201
  status: killed
  tests_run: 95
  time: 0.47026538848876953
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 82
    operator: CRP
  number: 202
  status: survived
  tests_run: 316
  time: 0.7760052680969238
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 82
    operator: CRP
  number: 203
  status: survived
  tests_run: 316
  time: 0.7634661197662354
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 83
    operator: CRP
  number: 204
  status: survived
  tests_run: 316
  time: 0.7669427394866943
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 83
    operator: CRP
  number: 205
  status: survived
  tests_run: 316
  time: 0.9186587333679199
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 84
    operator: CRP
  number: 206
  status: survived
  tests_run: 316
  time: 0.7709589004516602
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 84
    operator: CRP
  number: 207
  status: survived
  tests_run: 316
  time: 0.7708907127380371
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 85
    operator: CRP
  number: 208
  status: survived
  tests_run: 316
  time: 0.7550888061523438
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 85
    operator: CRP
  number: 209
  status: survived
  tests_run: 316
  time: 0.7589280605316162
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 86
    operator: CRP
  number: 210
  status: survived
  tests_run: 316
  time: 0.7817544937133789
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 86
    operator: CRP
  number: 211
  status: survived
  tests_run: 316
  time: 0.7680990695953369
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527690AE88>\nsource = '(-1) ** x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(-1)
    ** x]
  module: null
  mutations:
  - lineno: 87
    operator: CRP
  number: 212
  status: killed
  tests_run: 48
  time: 0.5556645393371582
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277A1EE48>\nsource = '(-1) ** x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(-1)
    ** x]
  module: null
  mutations:
  - lineno: 87
    operator: CRP
  number: 213
  status: killed
  tests_run: 48
  time: 0.40740227699279785
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527736D8C8>\nsource = 'x @ y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:391: in visit_Expr\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:281: in generic_visit\n\
    \    self.visit(value)\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n_ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n\
    self = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x00000252768001C8>\n\
    node = <_ast.BinOp object at 0x000002527736DC48>\n\n>   ???\nE   KeyError: <class\
    \ '_ast.MatMult'>\n\nvisitors:650: KeyError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    @ y]
  module: null
  mutations:
  - lineno: 90
    operator: CRP
  number: 214
  status: killed
  tests_run: 153
  time: 0.5592482089996338
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 90
    operator: CRP
  number: 215
  status: survived
  tests_run: 316
  time: 0.7779345512390137
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276CC7108>\nsource = 'x @ y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    @ y]
  module: null
  mutations:
  - lineno: 91
    operator: CRP
  number: 216
  status: killed
  tests_run: 153
  time: 0.5432665348052979
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278F64788>\nsource = 'x @ y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    @ y]
  module: null
  mutations:
  - lineno: 91
    operator: CRP
  number: 217
  status: killed
  tests_run: 153
  time: 0.5428581237792969
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025279104388>\nsource = 'def f():\\n    return x == \\\\\\n       \
    \ x'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def\
    \ test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting code\
    \ into AST and converting it back to code yields the same code.\"\"\"\n      \
    \  node = ast.parse(source)\n        generated = to_source(node)\n>       assert\
    \ source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return x == \\\n        x]
  module: null
  mutations:
  - lineno: 94
    operator: CRP
  number: 218
  status: killed
  tests_run: 28
  time: 0.3714919090270996
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025279374CC8>\nsource = 'def f():\\n    return x == \\\\\\n       \
    \ x'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def\
    \ test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting code\
    \ into AST and converting it back to code yields the same code.\"\"\"\n      \
    \  node = ast.parse(source)\n        generated = to_source(node)\n>       assert\
    \ source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return x == \\\n        x]
  module: null
  mutations:
  - lineno: 94
    operator: CRP
  number: 219
  status: killed
  tests_run: 28
  time: 0.37544941902160645
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025279529DC8>\nsource = 'y * (z if z > 1 else 1)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[y
    * (z if z > 1 else 1)]
  module: null
  mutations:
  - lineno: 95
    operator: CRP
  number: 220
  status: killed
  tests_run: 60
  time: 0.4124763011932373
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527973AEC8>\nsource = 'y * (z if z > 1 else 1)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[y
    * (z if z > 1 else 1)]
  module: null
  mutations:
  - lineno: 95
    operator: CRP
  number: 221
  status: killed
  tests_run: 60
  time: 0.4122614860534668
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025279143F48>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 96
    operator: CRP
  number: 222
  status: killed
  tests_run: 109
  time: 0.6746494770050049
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527970D588>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 96
    operator: CRP
  number: 223
  status: killed
  tests_run: 109
  time: 0.48851466178894043
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 97
    operator: CRP
  number: 224
  status: survived
  tests_run: 316
  time: 0.7709615230560303
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 97
    operator: CRP
  number: 225
  status: survived
  tests_run: 316
  time: 0.7670547962188721
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 98
    operator: CRP
  number: 226
  status: survived
  tests_run: 316
  time: 0.777728796005249
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 98
    operator: CRP
  number: 227
  status: survived
  tests_run: 316
  time: 0.7630245685577393
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 99
    operator: CRP
  number: 228
  status: survived
  tests_run: 316
  time: 0.7740416526794434
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 99
    operator: CRP
  number: 229
  status: survived
  tests_run: 316
  time: 0.7629668712615967
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527AA5F588>\nsource = 'x < y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    < y]
  module: null
  mutations:
  - lineno: 100
    operator: CRP
  number: 230
  status: killed
  tests_run: 43
  time: 0.39788079261779785
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527466C948>\nsource = 'x < y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    < y]
  module: null
  mutations:
  - lineno: 100
    operator: CRP
  number: 231
  status: killed
  tests_run: 43
  time: 0.5883853435516357
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 101
    operator: CRP
  number: 232
  status: survived
  tests_run: 316
  time: 0.7649667263031006
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 101
    operator: CRP
  number: 233
  status: survived
  tests_run: 316
  time: 0.7629837989807129
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277C8F2C8>\nsource = 'while not (i != 1):\\n    x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    not (i != 1):\n    x = 1]
  module: null
  mutations:
  - lineno: 102
    operator: CRP
  number: 234
  status: killed
  tests_run: 65
  time: 0.44025111198425293
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025274B1B208>\nsource = 'while not (i != 1):\\n    x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    not (i != 1):\n    x = 1]
  module: null
  mutations:
  - lineno: 102
    operator: CRP
  number: 235
  status: killed
  tests_run: 65
  time: 0.42258358001708984
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 103
    operator: CRP
  number: 236
  status: survived
  tests_run: 316
  time: 0.7621045112609863
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 103
    operator: CRP
  number: 237
  status: survived
  tests_run: 316
  time: 0.7720880508422852
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 107
    operator: CRP
  number: 238
  status: survived
  tests_run: 316
  time: 0.7669296264648438
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 107
    operator: CRP
  number: 239
  status: survived
  tests_run: 316
  time: 0.7613365650177002
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527AB14D48>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 108
    operator: CRP
  number: 240
  status: killed
  tests_run: 44
  time: 0.6292064189910889
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025273267DC8>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 108
    operator: CRP
  number: 241
  status: killed
  tests_run: 44
  time: 0.39664268493652344
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 109
    operator: CRP
  number: 242
  status: survived
  tests_run: 316
  time: 0.7817099094390869
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 109
    operator: CRP
  number: 243
  status: survived
  tests_run: 316
  time: 0.7681224346160889
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527522A388>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 110
    operator: CRP
  number: 244
  status: killed
  tests_run: 47
  time: 0.3975253105163574
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025275B56048>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 110
    operator: CRP
  number: 245
  status: killed
  tests_run: 47
  time: 0.39792561531066895
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276533E08>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 120
    operator: CRP
  number: 246
  status: killed
  tests_run: 16
  time: 0.36875367164611816
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025274B2DB48>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 120
    operator: CRP
  number: 247
  status: killed
  tests_run: 16
  time: 0.363513708114624
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527607AF08>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 120
    operator: CRP
  number: 248
  status: killed
  tests_run: 16
  time: 0.3595137596130371
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B453248>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 139
    operator: CRP
  number: 249
  status: killed
  tests_run: 6
  time: 0.3439137935638428
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B5F3F88>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 161
    operator: CRP
  number: 250
  status: killed
  tests_run: 6
  time: 0.3474864959716797
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B89ABC8>\n\n    def test_fix_linen_umbers(self):\n        \"\"\
    \"Check if an AST with wrong lineno attribute is corrected in the process.\"\"\
    \"\n        node = ast.parse('x = 1' + self.EOL + 'y = 2')\n        # set both\
    \ line numbers to 1\n        node.body[1].lineno = 1\n        to_source(node)\n\
    >       assert node.body[1].lineno == 2\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:411: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_fix_linen_umbers
  module: null
  mutations:
  - lineno: 164
    operator: CRP
  number: 251
  status: killed
  tests_run: 316
  time: 0.7868978977203369
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BB34788>\n\n    def test_fix_linen_umbers(self):\n        \"\"\
    \"Check if an AST with wrong lineno attribute is corrected in the process.\"\"\
    \"\n        node = ast.parse('x = 1' + self.EOL + 'y = 2')\n        # set both\
    \ line numbers to 1\n        node.body[1].lineno = 1\n        to_source(node)\n\
    >       assert node.body[1].lineno == 2\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:411: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_fix_linen_umbers
  module: null
  mutations:
  - lineno: 164
    operator: CRP
  number: 252
  status: killed
  tests_run: 316
  time: 1.0069870948791504
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277E700C8>\n\n    def test_fix_linen_umbers(self):\n        \"\"\
    \"Check if an AST with wrong lineno attribute is corrected in the process.\"\"\
    \"\n        node = ast.parse('x = 1' + self.EOL + 'y = 2')\n        # set both\
    \ line numbers to 1\n        node.body[1].lineno = 1\n        to_source(node)\n\
    >       assert node.body[1].lineno == 2\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:411: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_fix_linen_umbers
  module: null
  mutations:
  - lineno: 166
    operator: CRP
  number: 253
  status: killed
  tests_run: 316
  time: 0.7725563049316406
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278E86E88>\n\n    def test_fix_linen_umbers(self):\n        \"\"\
    \"Check if an AST with wrong lineno attribute is corrected in the process.\"\"\
    \"\n        node = ast.parse('x = 1' + self.EOL + 'y = 2')\n        # set both\
    \ line numbers to 1\n        node.body[1].lineno = 1\n        to_source(node)\n\
    >       assert node.body[1].lineno == 2\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:411: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_fix_linen_umbers
  module: null
  mutations:
  - lineno: 166
    operator: CRP
  number: 254
  status: killed
  tests_run: 316
  time: 0.7843470573425293
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025279761C08>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 177
    operator: CRP
  number: 255
  status: killed
  tests_run: 6
  time: 0.3560056686401367
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277E4D588>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 190
    operator: CRP
  number: 256
  status: killed
  tests_run: 6
  time: 0.34397244453430176
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 197
    operator: CRP
  number: 257
  status: survived
  tests_run: 316
  time: 0.7754600048065186
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 197
    operator: CRP
  number: 258
  status: timeout
  tests_run: null
  time: 7.233025312423706
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252771EB248>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:271: in body\n    ???\nvisitors:251:\
    \ in correct_line_number\n    ???\nvisitors:254: in add_missing_lines\n    ???\n\
    visitors:221: in _newline_needed\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x0000025276E2A608>\n\n>   ???\nE   ValueError: empty separator\n\n\
    visitors:197: ValueError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 197
    operator: CRP
  number: 259
  status: killed
  tests_run: 6
  time: 0.3914792537689209
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 197
    operator: CRP
  number: 260
  status: survived
  tests_run: 316
  time: 0.7601335048675537
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252792B8D08>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 202
    operator: CRP
  number: 261
  status: killed
  tests_run: 121
  time: 0.49938344955444336
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BBA2408>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 204
    operator: CRP
  number: 262
  status: killed
  tests_run: 121
  time: 0.5024588108062744
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BD75688>\nsource = \"class Sample:\\n    ''' This is a multi line\
    \ docstring.\\n\\nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    ''' This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 204
    operator: CRP
  number: 263
  status: killed
  tests_run: 122
  time: 0.500469446182251
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278F42F48>\nsource = \"b'''byte string\\nnext line\\n'''\"\n\n \
    \   @pytest.mark.parametrize(\"source\", semantic_testdata)\n    def test_codegen_semantic_preservation(self,\
    \ source):\n        \"\"\"Check if converting code into AST, converting it back\
    \ to code\n        and converting it into an AST again yields the same AST.\n\
    \        \"\"\"\n        node = ast.parse(source)\n>       generated = to_source(node)\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvisitors:137: in to_source\n\
    \    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:352: in\
    \ visit_Module\n    ???\nvisitors:271: in body\n    ???\nvisitors:251: in correct_line_number\n\
    \    ???\nvisitors:254: in add_missing_lines\n    ???\nvisitors:222: in _newline_needed\n\
    \    ???\nvisitors:203: in _get_actual_lineno\n    ???\n_ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Expr\
    \ object at 0x0000025276E6C8C8>\n\n>   ???\nE   LookupError: unknown encoding:\
    \ mutpy\n\nvisitors:217: LookupError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_semantic_preservation[b'''byte
    string\nnext line\n''']
  module: null
  mutations:
  - lineno: 217
    operator: CRP
  number: 264
  status: killed
  tests_run: 311
  time: 1.0465853214263916
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252789BE708>\nsource = \"b'''byte string\\nnext line\\n'''\"\n\n \
    \   @pytest.mark.parametrize(\"source\", semantic_testdata)\n    def test_codegen_semantic_preservation(self,\
    \ source):\n        \"\"\"Check if converting code into AST, converting it back\
    \ to code\n        and converting it into an AST again yields the same AST.\n\
    \        \"\"\"\n        node = ast.parse(source)\n>       generated = to_source(node)\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvisitors:137: in to_source\n\
    \    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:352: in\
    \ visit_Module\n    ???\nvisitors:271: in body\n    ???\nvisitors:251: in correct_line_number\n\
    \    ???\nvisitors:254: in add_missing_lines\n    ???\nvisitors:222: in _newline_needed\n\
    \    ???\nvisitors:203: in _get_actual_lineno\n    ???\n_ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Expr\
    \ object at 0x00000252789BE588>\n\n>   ???\nE   LookupError: unknown encoding:\n\
    \nvisitors:217: LookupError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_semantic_preservation[b'''byte
    string\nnext line\n''']
  module: null
  mutations:
  - lineno: 217
    operator: CRP
  number: 265
  status: killed
  tests_run: 311
  time: 0.7869031429290771
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025274B0D888>\nsource = 'x = 1\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\nx = 1]
  module: null
  mutations:
  - lineno: 224
    operator: CRP
  number: 266
  status: killed
  tests_run: 11
  time: 0.3554728031158447
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 227
    operator: CRP
  number: 267
  status: survived
  tests_run: 316
  time: 0.7720611095428467
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252754C6F48>\nsource = 'x = 1\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\nx = 1]
  module: null
  mutations:
  - lineno: 244
    operator: CRP
  number: 268
  status: killed
  tests_run: 11
  time: 0.35477232933044434
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277DCBFC8>\nsource = 'x = 1\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\nx = 1]
  module: null
  mutations:
  - lineno: 244
    operator: CRP
  number: 269
  status: killed
  tests_run: 11
  time: 0.3645479679107666
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527819C088>\nsource = 'def f():\\n    return x == \\\\\\n       \
    \ x'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def\
    \ test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting code\
    \ into AST and converting it back to code yields the same code.\"\"\"\n      \
    \  node = ast.parse(source)\n        generated = to_source(node)\n>       assert\
    \ source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return x == \\\n        x]
  module: null
  mutations:
  - lineno: 247
    operator: CRP
  number: 270
  status: killed
  tests_run: 28
  time: 0.3843116760253906
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252780D6A48>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 249
    operator: CRP
  number: 271
  status: killed
  tests_run: 6
  time: 0.34352898597717285
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527ACCA848>\nsource = 'def f():\\n    return x == \\\\\\n       \
    \ x'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def\
    \ test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting code\
    \ into AST and converting it back to code yields the same code.\"\"\"\n      \
    \  node = ast.parse(source)\n        generated = to_source(node)\n>       assert\
    \ source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return x == \\\n        x]
  module: null
  mutations:
  - lineno: 259
    operator: CRP
  number: 272
  status: killed
  tests_run: 28
  time: 0.3794376850128174
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BF85E48>\nsource = 'def f():\\n    return x == \\\\\\n       \
    \ x'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def\
    \ test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting code\
    \ into AST and converting it back to code yields the same code.\"\"\"\n      \
    \  node = ast.parse(source)\n        generated = to_source(node)\n>       assert\
    \ source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return x == \\\n        x]
  module: null
  mutations:
  - lineno: 259
    operator: CRP
  number: 273
  status: killed
  tests_run: 28
  time: 0.3775146007537842
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 264
    operator: CRP
  number: 274
  status: timeout
  tests_run: null
  time: 7.227594614028931
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 264
    operator: CRP
  number: 275
  status: timeout
  tests_run: null
  time: 7.222736597061157
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C3CF688>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 267
    operator: CRP
  number: 276
  status: killed
  tests_run: 16
  time: 0.3874845504760742
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C1C96C8>\nsource = 'if x:\\n    pass\\nelse:\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:437:\
    \ in visit_If\n    ???\nvisitors:449: in if_elif\n    ???\nvisitors:455: in if_or_else\n\
    \    ???\nvisitors:286: in or_else\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x000002527C1C93C8>\nkeyword = 'else:', body = [<_ast.Pass object\
    \ at 0x000002527C1C9408>]\n\n>   ???\nE   IndexError: list index out of range\n\
    \nvisitors:280: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelse:\n    pass]
  module: null
  mutations:
  - lineno: 280
    operator: CRP
  number: 277
  status: killed
  tests_run: 53
  time: 0.42279934883117676
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C7B2888>\nsource = 'if x:\\n    pass\\nelse:\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelse:\n    pass]
  module: null
  mutations:
  - lineno: 286
    operator: CRP
  number: 278
  status: killed
  tests_run: 53
  time: 0.415447473526001
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025279712208>\nsource = 'if x:\\n    pass\\nelse:\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelse:\n    pass]
  module: null
  mutations:
  - lineno: 286
    operator: CRP
  number: 279
  status: killed
  tests_run: 53
  time: 0.7155134677886963
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B9EA308>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 290
    operator: CRP
  number: 280
  status: killed
  tests_run: 121
  time: 0.5153133869171143
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252778DA048>\nsource = \"''' This is a single line docstring.'''\"\
    \n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a single line docstring.''']
  module: null
  mutations:
  - lineno: 290
    operator: CRP
  number: 281
  status: killed
  tests_run: 120
  time: 0.4993255138397217
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527537E288>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 290
    operator: CRP
  number: 282
  status: killed
  tests_run: 121
  time: 0.5083274841308594
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252751DA588>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 290
    operator: CRP
  number: 283
  status: killed
  tests_run: 121
  time: 0.5071887969970703
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 291
    operator: CRP
  number: 284
  status: survived
  tests_run: 316
  time: 0.7617723941802979
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025275FED288>\nsource = \"''' This is a single line docstring.'''\"\
    \n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a single line docstring.''']
  module: null
  mutations:
  - lineno: 291
    operator: CRP
  number: 285
  status: killed
  tests_run: 120
  time: 0.5112669467926025
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 291
    operator: CRP
  number: 286
  status: survived
  tests_run: 316
  time: 0.7820367813110352
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 291
    operator: CRP
  number: 287
  status: survived
  tests_run: 316
  time: 0.7669694423675537
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 292
    operator: CRP
  number: 288
  status: incompetent
  tests_run: 120
  time: 0.5074479579925537
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 292
    operator: CRP
  number: 289
  status: incompetent
  tests_run: 120
  time: 0.5153141021728516
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C8FAE08>\nsource = \"''' This is a single line docstring.'''\"\
    \n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a single line docstring.''']
  module: null
  mutations:
  - lineno: 292
    operator: CRP
  number: 290
  status: killed
  tests_run: 120
  time: 0.49927592277526855
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252782798C8>\nsource = \"''' This is a single line docstring.'''\"\
    \n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a single line docstring.''']
  module: null
  mutations:
  - lineno: 292
    operator: CRP
  number: 291
  status: killed
  tests_run: 120
  time: 0.7909963130950928
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276DA8788>\nsource = \"''' This is a single line docstring.'''\"\
    \n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a single line docstring.''']
  module: null
  mutations:
  - lineno: 292
    operator: CRP
  number: 292
  status: killed
  tests_run: 120
  time: 0.49956512451171875
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252794FE788>\nsource = \"''' This is a single line docstring.'''\"\
    \n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a single line docstring.''']
  module: null
  mutations:
  - lineno: 292
    operator: CRP
  number: 293
  status: killed
  tests_run: 120
  time: 0.5047550201416016
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252733CCD88>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:878: in visit_FunctionDef\n   \
    \ ???\nvisitors:301: in signature\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x0000025276A93D88>\nnode = <_ast.arguments object at 0x0000025276A93EC8>,\
    \ var = 'mutpy'\nwrite_comma = <astmonkey.utils.CommaWriter object at 0x00000252773B2C48>\n\
    prefix = '*'\n\n>   ???\nE   AttributeError: 'arguments' object has no attribute\
    \ 'mutpy'\n\nvisitors:332: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 301
    operator: CRP
  number: 294
  status: killed
  tests_run: 19
  time: 0.3874328136444092
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277E79708>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:878: in visit_FunctionDef\n   \
    \ ???\nvisitors:301: in signature\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x0000025278182DC8>\nnode = <_ast.arguments object at 0x0000025277C65708>,\
    \ var = ''\nwrite_comma = <astmonkey.utils.CommaWriter object at 0x0000025277C65448>\n\
    prefix = '*'\n\n>   ???\nE   AttributeError: 'arguments' object has no attribute\
    \ ''\n\nvisitors:332: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 301
    operator: CRP
  number: 295
  status: killed
  tests_run: 19
  time: 0.37949085235595703
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276C55B48>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 301
    operator: CRP
  number: 296
  status: killed
  tests_run: 24
  time: 0.374218225479126
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252771DBE48>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 301
    operator: CRP
  number: 297
  status: killed
  tests_run: 24
  time: 0.37273240089416504
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276E814C8>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:878: in visit_FunctionDef\n   \
    \ ???\nvisitors:303: in signature\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x0000025274922F48>\nnode = <_ast.arguments object at 0x0000025274922988>,\
    \ var = 'mutpy'\nwrite_comma = <astmonkey.utils.CommaWriter object at 0x00000252765EB188>\n\
    prefix = '**'\n\n>   ???\nE   AttributeError: 'arguments' object has no attribute\
    \ 'mutpy'\n\nvisitors:332: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 303
    operator: CRP
  number: 298
  status: killed
  tests_run: 19
  time: 0.37544727325439453
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276F474C8>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:878: in visit_FunctionDef\n   \
    \ ???\nvisitors:303: in signature\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x000002527605FA08>\nnode = <_ast.arguments object at 0x0000025276F47E48>,\
    \ var = ''\nwrite_comma = <astmonkey.utils.CommaWriter object at 0x0000025276F47348>\n\
    prefix = '**'\n\n>   ???\nE   AttributeError: 'arguments' object has no attribute\
    \ ''\n\nvisitors:332: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 303
    operator: CRP
  number: 299
  status: killed
  tests_run: 19
  time: 0.3794820308685303
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527947E148>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 303
    operator: CRP
  number: 300
  status: killed
  tests_run: 24
  time: 0.3678710460662842
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BCC0B48>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 303
    operator: CRP
  number: 301
  status: killed
  tests_run: 24
  time: 0.3701441287994385
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527CB6C5C8>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 305
    operator: CRP
  number: 302
  status: killed
  tests_run: 24
  time: 0.3725883960723877
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527CECBD88>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 310
    operator: CRP
  number: 303
  status: killed
  tests_run: 137
  time: 0.5216879844665527
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D0FC848>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 310
    operator: CRP
  number: 304
  status: killed
  tests_run: 137
  time: 0.5195436477661133
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D330B48>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 311
    operator: CRP
  number: 305
  status: killed
  tests_run: 137
  time: 0.523303747177124
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D565E88>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 311
    operator: CRP
  number: 306
  status: killed
  tests_run: 137
  time: 0.5270957946777344
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252773523C8>\nsource = \"def f(x: 'x' = 0):\\n    pass\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x: ''x'' = 0):\n    pass]'
  module: null
  mutations:
  - lineno: 314
    operator: CRP
  number: 307
  status: killed
  tests_run: 138
  time: 0.5352895259857178
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278579348>\nsource = \"def f(x: 'x' = 0):\\n    pass\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x: ''x'' = 0):\n    pass]'
  module: null
  mutations:
  - lineno: 314
    operator: CRP
  number: 308
  status: killed
  tests_run: 138
  time: 0.5275731086730957
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527875AC88>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 317
    operator: CRP
  number: 309
  status: killed
  tests_run: 24
  time: 0.37544894218444824
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252732E1F48>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 317
    operator: CRP
  number: 310
  status: killed
  tests_run: 24
  time: 0.3794431686401367
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252785DC8C8>\nsource = \"def f(x: 'x' = 0, *args: 'args', y: 'y' =\
    \ 1, **kwargs: 'kwargs') -> 'return':\\n    pass\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x: ''x'' = 0, *args: ''args'', y: ''y'' = 1, **kwargs: ''kwargs'') -> ''return'':\n    pass]'
  module: null
  mutations:
  - lineno: 321
    operator: CRP
  number: 311
  status: killed
  tests_run: 139
  time: 0.5316798686981201
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025275A32D08>\nsource = \"def f(x: 'x' = 0, *args: 'args', y: 'y' =\
    \ 1, **kwargs: 'kwargs') -> 'return':\\n    pass\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x: ''x'' = 0, *args: ''args'', y: ''y'' = 1, **kwargs: ''kwargs'') -> ''return'':\n    pass]'
  module: null
  mutations:
  - lineno: 321
    operator: CRP
  number: 312
  status: killed
  tests_run: 139
  time: 0.5277199745178223
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C1FAF88>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 321
    operator: CRP
  number: 313
  status: killed
  tests_run: 19
  time: 0.3662569522857666
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277FF9E88>\nsource = 'def f(*, x):\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(*, x):\n    pass]
  module: null
  mutations:
  - lineno: 326
    operator: CRP
  number: 314
  status: killed
  tests_run: 142
  time: 0.5327303409576416
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C030D48>\nsource = 'def f(*, x):\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(*, x):\n    pass]
  module: null
  mutations:
  - lineno: 326
    operator: CRP
  number: 315
  status: killed
  tests_run: 142
  time: 0.5311658382415771
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 334
    operator: CRP
  number: 316
  status: survived
  tests_run: 316
  time: 0.7728922367095947
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527A9F3948>\nsource = 'def f(x, y=1, *args, **kwargs):\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:878:\
    \ in visit_FunctionDef\n    ???\nvisitors:301: in signature\n    ???\n_ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n\
    self = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x000002527A9F3B08>\n\
    node = <_ast.arguments object at 0x000002527A9F3AC8>, var = 'vararg'\nwrite_comma\
    \ = <astmonkey.utils.CommaWriter object at 0x000002527A9E5148>\nprefix = '*'\n\
    \n>   ???\nE   AttributeError: 'arguments' object has no attribute 'varargannotation'\n\
    \nvisitors:335: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(x, y=1, *args, **kwargs):\n    pass]
  module: null
  mutations:
  - lineno: 334
    operator: CRP
  number: 317
  status: killed
  tests_run: 24
  time: 0.3834400177001953
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 335
    operator: CRP
  number: 318
  status: survived
  tests_run: 316
  time: 0.7743716239929199
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 335
    operator: CRP
  number: 319
  status: survived
  tests_run: 316
  time: 0.7629287242889404
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D634CC8>\nsource = '@x(y)\\ndef f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[@x(y)\ndef
    f():\n    pass]
  module: null
  mutations:
  - lineno: 341
    operator: CRP
  number: 320
  status: killed
  tests_run: 98
  time: 0.7911045551300049
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025274F60A08>\nsource = '@x(y)\\ndef f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[@x(y)\ndef
    f():\n    pass]
  module: null
  mutations:
  - lineno: 341
    operator: CRP
  number: 321
  status: killed
  tests_run: 98
  time: 0.4718050956726074
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BBFDF88>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 352
    operator: CRP
  number: 322
  status: killed
  tests_run: 6
  time: 0.3474860191345215
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527640F448>\nsource = 'a = b = c'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[a
    = b = c]
  module: null
  mutations:
  - lineno: 358
    operator: CRP
  number: 323
  status: killed
  tests_run: 9
  time: 0.35191845893859863
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B1BC148>\nsource = 'a = b = c'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[a
    = b = c]
  module: null
  mutations:
  - lineno: 358
    operator: CRP
  number: 324
  status: killed
  tests_run: 9
  time: 0.34748196601867676
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278CC8BC8>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 360
    operator: CRP
  number: 325
  status: killed
  tests_run: 6
  time: 0.3475077152252197
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025274FEB608>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 360
    operator: CRP
  number: 326
  status: killed
  tests_run: 6
  time: 0.34407591819763184
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527AA4C4C8>\nsource = 'x += 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    += 1]
  module: null
  mutations:
  - lineno: 366
    operator: CRP
  number: 327
  status: killed
  tests_run: 8
  time: 0.35262441635131836
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527688F7C8>\nsource = 'x += 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    += 1]
  module: null
  mutations:
  - lineno: 366
    operator: CRP
  number: 328
  status: killed
  tests_run: 8
  time: 0.3515167236328125
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276A09E48>\nsource = 'x += 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    += 1]
  module: null
  mutations:
  - lineno: 366
    operator: CRP
  number: 329
  status: killed
  tests_run: 8
  time: 0.35951876640319824
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B8DE508>\nsource = 'x += 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    += 1]
  module: null
  mutations:
  - lineno: 366
    operator: CRP
  number: 330
  status: killed
  tests_run: 8
  time: 0.35347938537597656
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278DB0508>\nsource = 'from x import y as z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    x import y as z]
  module: null
  mutations:
  - lineno: 375
    operator: CRP
  number: 331
  status: killed
  tests_run: 37
  time: 0.3898739814758301
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278D65208>\nsource = 'from x import y as z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    x import y as z]
  module: null
  mutations:
  - lineno: 375
    operator: CRP
  number: 332
  status: killed
  tests_run: 37
  time: 0.39148449897766113
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C710548>\nsource = 'from x import y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    x import y]
  module: null
  mutations:
  - lineno: 377
    operator: CRP
  number: 333
  status: killed
  tests_run: 35
  time: 0.3834373950958252
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D7F2888>\nsource = 'from x import y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    x import y]
  module: null
  mutations:
  - lineno: 377
    operator: CRP
  number: 334
  status: killed
  tests_run: 35
  time: 0.38659143447875977
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D8C7688>\nsource = 'from . import x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    . import x]
  module: null
  mutations:
  - lineno: 377
    operator: CRP
  number: 335
  status: killed
  tests_run: 39
  time: 0.38752079010009766
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DBD9D08>\nsource = 'from . import x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    . import x]
  module: null
  mutations:
  - lineno: 377
    operator: CRP
  number: 336
  status: killed
  tests_run: 39
  time: 0.38747215270996094
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DE163C8>\nsource = 'from . import x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    . import x]
  module: null
  mutations:
  - lineno: 377
    operator: CRP
  number: 337
  status: killed
  tests_run: 39
  time: 0.38747429847717285
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DF98508>\nsource = 'from x import y, z, q'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    x import y, z, q]
  module: null
  mutations:
  - lineno: 377
    operator: CRP
  number: 338
  status: killed
  tests_run: 36
  time: 0.38663792610168457
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E1B3B08>\nsource = 'from x import y, z, q'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    x import y, z, q]
  module: null
  mutations:
  - lineno: 377
    operator: CRP
  number: 339
  status: killed
  tests_run: 36
  time: 0.3874697685241699
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D6B64C8>\nsource = 'import x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[import
    x]
  module: null
  mutations:
  - lineno: 381
    operator: CRP
  number: 340
  status: killed
  tests_run: 31
  time: 0.7497894763946533
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B0C2108>\nsource = 'import x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[import
    x]
  module: null
  mutations:
  - lineno: 381
    operator: CRP
  number: 341
  status: killed
  tests_run: 31
  time: 0.38449978828430176
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527AB7EAC8>\nsource = \"f(b='c')\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(b='c')]
  module: null
  mutations:
  - lineno: 394
    operator: CRP
  number: 342
  status: killed
  tests_run: 101
  time: 0.4833035469055176
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277DF5C08>\nsource = \"f(b='c')\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(b='c')]
  module: null
  mutations:
  - lineno: 394
    operator: CRP
  number: 343
  status: killed
  tests_run: 101
  time: 0.48082780838012695
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025273312D48>\nsource = \"f(b='c')\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(b='c')]
  module: null
  mutations:
  - lineno: 395
    operator: CRP
  number: 344
  status: killed
  tests_run: 101
  time: 0.48372578620910645
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252772F74C8>\nsource = \"f(b='c')\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(b='c')]
  module: null
  mutations:
  - lineno: 395
    operator: CRP
  number: 345
  status: killed
  tests_run: 101
  time: 0.4713585376739502
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276A2F5C8>\nsource = 'f(**kwargs)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(**kwargs)]
  module: null
  mutations:
  - lineno: 397
    operator: CRP
  number: 346
  status: killed
  tests_run: 103
  time: 0.48404479026794434
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277F38988>\nsource = 'f(**kwargs)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(**kwargs)]
  module: null
  mutations:
  - lineno: 397
    operator: CRP
  number: 347
  status: killed
  tests_run: 103
  time: 0.4753539562225342
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 407
    operator: CRP
  number: 348
  status: incompetent
  tests_run: 149
  time: 0.5518054962158203
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 407
    operator: CRP
  number: 349
  status: incompetent
  tests_run: 149
  time: 0.5516321659088135
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252750B8088>\nsource = 'async def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    pass]
  module: null
  mutations:
  - lineno: 409
    operator: CRP
  number: 350
  status: killed
  tests_run: 149
  time: 0.543264627456665
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D177948>\nsource = 'async def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    pass]
  module: null
  mutations:
  - lineno: 409
    operator: CRP
  number: 351
  status: killed
  tests_run: 149
  time: 0.5519602298736572
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 413
    operator: CRP
  number: 352
  status: survived
  tests_run: 316
  time: 0.7589874267578125
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 413
    operator: CRP
  number: 353
  status: survived
  tests_run: 316
  time: 0.759009599685669
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527CF37388>\nsource = 'async def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    pass]
  module: null
  mutations:
  - lineno: 415
    operator: CRP
  number: 354
  status: killed
  tests_run: 149
  time: 0.539264440536499
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252750B5B48>\nsource = 'async def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    pass]
  module: null
  mutations:
  - lineno: 415
    operator: CRP
  number: 355
  status: killed
  tests_run: 149
  time: 0.8959765434265137
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 422
    operator: CRP
  number: 356
  status: survived
  tests_run: 316
  time: 0.7636184692382812
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 422
    operator: CRP
  number: 357
  status: survived
  tests_run: 316
  time: 0.7720596790313721
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 425
    operator: CRP
  number: 358
  status: survived
  tests_run: 316
  time: 0.7774288654327393
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 425
    operator: CRP
  number: 359
  status: survived
  tests_run: 316
  time: 0.7601101398468018
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 429
    operator: CRP
  number: 360
  status: survived
  tests_run: 316
  time: 0.7701365947723389
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 429
    operator: CRP
  number: 361
  status: survived
  tests_run: 316
  time: 0.7669191360473633
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 433
    operator: CRP
  number: 362
  status: survived
  tests_run: 316
  time: 0.7666378021240234
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 433
    operator: CRP
  number: 363
  status: survived
  tests_run: 316
  time: 0.7629780769348145
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 433
    operator: CRP
  number: 364
  status: survived
  tests_run: 316
  time: 0.7630355358123779
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 433
    operator: CRP
  number: 365
  status: survived
  tests_run: 316
  time: 0.7550337314605713
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D445688>\nsource = 'if x:\\n    pass\\nelif y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelif y:\n    pass]
  module: null
  mutations:
  - lineno: 442
    operator: CRP
  number: 366
  status: killed
  tests_run: 54
  time: 0.4057769775390625
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E3B35C8>\nsource = 'if x:\\n    pass\\nelif y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelif y:\n    pass]
  module: null
  mutations:
  - lineno: 442
    operator: CRP
  number: 367
  status: killed
  tests_run: 54
  time: 0.4074559211730957
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025274EBB348>\nsource = 'if x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass]
  module: null
  mutations:
  - lineno: 444
    operator: CRP
  number: 368
  status: killed
  tests_run: 52
  time: 0.763648509979248
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B1B7608>\nsource = 'if x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass]
  module: null
  mutations:
  - lineno: 444
    operator: CRP
  number: 369
  status: killed
  tests_run: 52
  time: 0.4114871025085449
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E021848>\nsource = 'if x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass]
  module: null
  mutations:
  - lineno: 446
    operator: CRP
  number: 370
  status: killed
  tests_run: 52
  time: 0.4074554443359375
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276AFC108>\nsource = 'if x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass]
  module: null
  mutations:
  - lineno: 446
    operator: CRP
  number: 371
  status: killed
  tests_run: 52
  time: 0.4135458469390869
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025276B1D3C8>\nsource = 'if x:\\n    pass\\nelif y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelif y:\n    pass]
  module: null
  mutations:
  - lineno: 452
    operator: CRP
  number: 372
  status: killed
  tests_run: 54
  time: 0.41649341583251953
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D9FC908>\nsource = 'if x:\\n    pass\\nelse:\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:437:\
    \ in visit_If\n    ???\nvisitors:449: in if_elif\n    ???\n_ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x000002527DFAECC8>\nnode = <_ast.If object at 0x000002527DFAE548>\n\
    \n>   ???\nE   IndexError: list index out of range\n\nvisitors:452: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelse:\n    pass]
  module: null
  mutations:
  - lineno: 452
    operator: CRP
  number: 373
  status: killed
  tests_run: 53
  time: 0.4154484272003174
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B3FF408>\nsource = 'if x:\\n    pass\\nelif y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:437:\
    \ in visit_If\n    ???\nvisitors:449: in if_elif\n    ???\n_ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x000002527B3FFF08>\nnode = <_ast.If object at 0x000002527D7C0108>\n\
    \n>   ???\nE   IndexError: list index out of range\n\nvisitors:453: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelif y:\n    pass]
  module: null
  mutations:
  - lineno: 453
    operator: CRP
  number: 374
  status: killed
  tests_run: 54
  time: 0.42940449714660645
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025275A92788>\nsource = 'for x in y:\\n    break'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[for
    x in y:\n    break]
  module: null
  mutations:
  - lineno: 462
    operator: CRP
  number: 375
  status: killed
  tests_run: 69
  time: 0.43662166595458984
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025274F5BF88>\nsource = 'for x in y:\\n    break'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[for
    x in y:\n    break]
  module: null
  mutations:
  - lineno: 462
    operator: CRP
  number: 376
  status: killed
  tests_run: 69
  time: 0.42737627029418945
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DB92C48>\nsource = 'for x in y:\\n    break'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[for
    x in y:\n    break]
  module: null
  mutations:
  - lineno: 464
    operator: CRP
  number: 377
  status: killed
  tests_run: 69
  time: 0.43541955947875977
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DAAFEC8>\nsource = 'for x in y:\\n    break'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[for
    x in y:\n    break]
  module: null
  mutations:
  - lineno: 464
    operator: CRP
  number: 378
  status: killed
  tests_run: 69
  time: 0.42290663719177246
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DB0F188>\nsource = 'for x in y:\\n    break'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[for
    x in y:\n    break]
  module: null
  mutations:
  - lineno: 466
    operator: CRP
  number: 379
  status: killed
  tests_run: 69
  time: 0.4274294376373291
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DAE65C8>\nsource = 'for x in y:\\n    break'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[for
    x in y:\n    break]
  module: null
  mutations:
  - lineno: 466
    operator: CRP
  number: 380
  status: killed
  tests_run: 69
  time: 0.42343688011169434
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E4D52C8>\nsource = 'while not (i != 1):\\n    x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    not (i != 1):\n    x = 1]
  module: null
  mutations:
  - lineno: 470
    operator: CRP
  number: 381
  status: killed
  tests_run: 65
  time: 0.4283592700958252
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E6C4B88>\nsource = 'while not (i != 1):\\n    x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    not (i != 1):\n    x = 1]
  module: null
  mutations:
  - lineno: 470
    operator: CRP
  number: 382
  status: killed
  tests_run: 65
  time: 0.4261181354522705
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E9873C8>\nsource = 'while not (i != 1):\\n    x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    not (i != 1):\n    x = 1]
  module: null
  mutations:
  - lineno: 472
    operator: CRP
  number: 383
  status: killed
  tests_run: 65
  time: 0.42455053329467773
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527EB66688>\nsource = 'while not (i != 1):\\n    x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    not (i != 1):\n    x = 1]
  module: null
  mutations:
  - lineno: 472
    operator: CRP
  number: 384
  status: killed
  tests_run: 65
  time: 0.4274864196777344
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E946E88>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 476
    operator: CRP
  number: 385
  status: killed
  tests_run: 16
  time: 0.3594658374786377
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527EF82B08>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 476
    operator: CRP
  number: 386
  status: killed
  tests_run: 16
  time: 0.35675597190856934
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 480
    operator: CRP
  number: 387
  status: survived
  tests_run: 316
  time: 0.7663488388061523
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 480
    operator: CRP
  number: 388
  status: survived
  tests_run: 316
  time: 1.166222333908081
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 483
    operator: CRP
  number: 389
  status: survived
  tests_run: 316
  time: 0.7639963626861572
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 483
    operator: CRP
  number: 390
  status: survived
  tests_run: 316
  time: 0.7742180824279785
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 488
    operator: CRP
  number: 391
  status: survived
  tests_run: 316
  time: 0.7880029678344727
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 488
    operator: CRP
  number: 392
  status: survived
  tests_run: 316
  time: 0.7681818008422852
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 492
    operator: CRP
  number: 393
  status: survived
  tests_run: 316
  time: 0.7700791358947754
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 492
    operator: CRP
  number: 394
  status: survived
  tests_run: 316
  time: 0.7721281051635742
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252784F2EC8>\nsource = 'del x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[del
    x]
  module: null
  mutations:
  - lineno: 495
    operator: CRP
  number: 395
  status: killed
  tests_run: 77
  time: 0.45134735107421875
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252783D3808>\nsource = 'del x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[del
    x]
  module: null
  mutations:
  - lineno: 495
    operator: CRP
  number: 396
  status: killed
  tests_run: 77
  time: 0.45121049880981445
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527CF346C8>\nsource = 'del x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x000002527928AC08>\nnode = <_ast.Delete object at 0x000002527CF34608>\n\
    \n>   ???\nE   IndexError: list index out of range\n\nvisitors:498: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[del
    x]
  module: null
  mutations:
  - lineno: 498
    operator: CRP
  number: 397
  status: killed
  tests_run: 77
  time: 0.451385498046875
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527CB67BC8>\nsource = 'del x, y, z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[del
    x, y, z]
  module: null
  mutations:
  - lineno: 499
    operator: CRP
  number: 398
  status: killed
  tests_run: 78
  time: 0.44641542434692383
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527CBEAE48>\nsource = 'del x, y, z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[del
    x, y, z]
  module: null
  mutations:
  - lineno: 499
    operator: CRP
  number: 399
  status: killed
  tests_run: 78
  time: 0.45249056816101074
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527A95D848>\nsource = 'global x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[global
    x]
  module: null
  mutations:
  - lineno: 502
    operator: CRP
  number: 400
  status: killed
  tests_run: 93
  time: 0.46732568740844727
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BEF1EC8>\nsource = 'global x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[global
    x]
  module: null
  mutations:
  - lineno: 502
    operator: CRP
  number: 401
  status: killed
  tests_run: 93
  time: 0.46337342262268066
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 502
    operator: CRP
  number: 402
  status: survived
  tests_run: 316
  time: 0.7692503929138184
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 502
    operator: CRP
  number: 403
  status: survived
  tests_run: 316
  time: 0.7650277614593506
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025279432448>\nsource = 'nonlocal x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[nonlocal
    x]
  module: null
  mutations:
  - lineno: 505
    operator: CRP
  number: 404
  status: killed
  tests_run: 131
  time: 0.9079859256744385
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277559208>\nsource = 'nonlocal x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[nonlocal
    x]
  module: null
  mutations:
  - lineno: 505
    operator: CRP
  number: 405
  status: killed
  tests_run: 131
  time: 0.5182230472564697
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 505
    operator: CRP
  number: 406
  status: survived
  tests_run: 316
  time: 0.7709214687347412
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 505
    operator: CRP
  number: 407
  status: survived
  tests_run: 316
  time: 0.7710893154144287
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527AD9E208>\nsource = 'def f():\\n    return'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return]
  module: null
  mutations:
  - lineno: 509
    operator: CRP
  number: 408
  status: killed
  tests_run: 26
  time: 0.3804047107696533
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527970FA88>\nsource = 'def f():\\n    return'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return]
  module: null
  mutations:
  - lineno: 509
    operator: CRP
  number: 409
  status: killed
  tests_run: 26
  time: 0.37549304962158203
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E033248>\nsource = 'def f():\\n    return 5'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return 5]
  module: null
  mutations:
  - lineno: 511
    operator: CRP
  number: 410
  status: killed
  tests_run: 27
  time: 0.3754739761352539
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E433948>\nsource = 'def f():\\n    return 5'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return 5]
  module: null
  mutations:
  - lineno: 511
    operator: CRP
  number: 411
  status: killed
  tests_run: 27
  time: 0.37548828125
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527ABE4308>\nsource = 'while True:\\n    if True:\\n        break'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    True:\n    if True:\n        break]
  module: null
  mutations:
  - lineno: 515
    operator: CRP
  number: 412
  status: killed
  tests_run: 67
  time: 0.43536829948425293
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252783D3A48>\nsource = 'while True:\\n    if True:\\n        break'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    True:\n    if True:\n        break]
  module: null
  mutations:
  - lineno: 515
    operator: CRP
  number: 413
  status: killed
  tests_run: 67
  time: 0.4258134365081787
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D00F808>\nsource = 'while True:\\n    if True:\\n        continue'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    True:\n    if True:\n        continue]
  module: null
  mutations:
  - lineno: 518
    operator: CRP
  number: 414
  status: killed
  tests_run: 66
  time: 0.42790985107421875
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527CAB12C8>\nsource = 'while True:\\n    if True:\\n        continue'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[while
    True:\n    if True:\n        continue]
  module: null
  mutations:
  - lineno: 518
    operator: CRP
  number: 415
  status: killed
  tests_run: 66
  time: 0.43245911598205566
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BCF2D08>\nsource = 'raise Exception()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception()]
  module: null
  mutations:
  - lineno: 522
    operator: CRP
  number: 416
  status: killed
  tests_run: 94
  time: 0.4617304801940918
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D24F048>\nsource = 'raise Exception()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception()]
  module: null
  mutations:
  - lineno: 522
    operator: CRP
  number: 417
  status: killed
  tests_run: 94
  time: 0.4606599807739258
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F5B2D88>\nsource = 'raise Exception()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception()]
  module: null
  mutations:
  - lineno: 523
    operator: CRP
  number: 418
  status: killed
  tests_run: 94
  time: 0.48471641540527344
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F73CFC8>\nsource = 'raise Exception()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception()]
  module: null
  mutations:
  - lineno: 523
    operator: CRP
  number: 419
  status: killed
  tests_run: 94
  time: 0.46678662300109863
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 525
    operator: CRP
  number: 420
  status: survived
  tests_run: 316
  time: 0.7680115699768066
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 525
    operator: CRP
  number: 421
  status: survived
  tests_run: 316
  time: 0.7542126178741455
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 529
    operator: CRP
  number: 422
  status: survived
  tests_run: 316
  time: 0.7590274810791016
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 529
    operator: CRP
  number: 423
  status: survived
  tests_run: 316
  time: 1.197793960571289
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 532
    operator: CRP
  number: 424
  status: survived
  tests_run: 316
  time: 0.7668008804321289
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 532
    operator: CRP
  number: 425
  status: survived
  tests_run: 316
  time: 0.7709710597991943
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 535
    operator: CRP
  number: 426
  status: survived
  tests_run: 316
  time: 0.7713313102722168
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 535
    operator: CRP
  number: 427
  status: survived
  tests_run: 316
  time: 0.7709712982177734
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025271E9AAC8>\nsource = 'raise Exception()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception()]
  module: null
  mutations:
  - lineno: 539
    operator: CRP
  number: 428
  status: killed
  tests_run: 94
  time: 0.47972917556762695
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527AE9C408>\nsource = 'raise Exception()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception()]
  module: null
  mutations:
  - lineno: 539
    operator: CRP
  number: 429
  status: killed
  tests_run: 94
  time: 0.4633793830871582
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F0357C8>\nsource = 'raise Exception() from exc'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception() from exc]
  module: null
  mutations:
  - lineno: 542
    operator: CRP
  number: 430
  status: killed
  tests_run: 133
  time: 0.5349087715148926
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E727F48>\nsource = 'raise Exception() from exc'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[raise
    Exception() from exc]
  module: null
  mutations:
  - lineno: 542
    operator: CRP
  number: 431
  status: killed
  tests_run: 133
  time: 0.5204012393951416
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DCA6608>\nsource = \"'a {}'.format('b')\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['a
    {}'.format('b')]
  module: null
  mutations:
  - lineno: 549
    operator: CRP
  number: 432
  status: killed
  tests_run: 96
  time: 0.4688913822174072
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E72FD08>\nsource = \"'a {}'.format('b')\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['a
    {}'.format('b')]
  module: null
  mutations:
  - lineno: 549
    operator: CRP
  number: 433
  status: killed
  tests_run: 96
  time: 0.4748246669769287
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 553
    operator: CRP
  number: 434
  status: survived
  tests_run: 316
  time: 0.7671561241149902
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 553
    operator: CRP
  number: 435
  status: survived
  tests_run: 316
  time: 0.7660524845123291
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 553
    operator: CRP
  number: 436
  status: survived
  tests_run: 316
  time: 0.7629709243774414
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 553
    operator: CRP
  number: 437
  status: survived
  tests_run: 316
  time: 0.7907259464263916
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 554
    operator: CRP
  number: 438
  status: survived
  tests_run: 316
  time: 0.7629702091217041
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 554
    operator: CRP
  number: 439
  status: survived
  tests_run: 316
  time: 0.7653539180755615
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 555
    operator: CRP
  number: 440
  status: survived
  tests_run: 316
  time: 0.7576777935028076
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 555
    operator: CRP
  number: 441
  status: survived
  tests_run: 316
  time: 1.2279865741729736
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 580
    operator: CRP
  number: 442
  status: survived
  tests_run: 316
  time: 0.7681701183319092
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 580
    operator: CRP
  number: 443
  status: survived
  tests_run: 316
  time: 0.7532539367675781
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 584
    operator: CRP
  number: 444
  status: survived
  tests_run: 316
  time: 0.7654366493225098
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 584
    operator: CRP
  number: 445
  status: survived
  tests_run: 316
  time: 0.7830765247344971
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 608
    operator: CRP
  number: 446
  status: survived
  tests_run: 316
  time: 0.7894227504730225
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 608
    operator: CRP
  number: 447
  status: survived
  tests_run: 316
  time: 0.7736544609069824
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 608
    operator: CRP
  number: 448
  status: survived
  tests_run: 316
  time: 0.7669754028320312
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 608
    operator: CRP
  number: 449
  status: survived
  tests_run: 316
  time: 0.7787344455718994
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200AEC348>\nsource = '0 + 0j'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[0
    + 0j]
  module: null
  mutations:
  - lineno: 608
    operator: CRP
  number: 450
  status: killed
  tests_run: 50
  time: 0.4034550189971924
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200B6CDC8>\nsource = '(x, y) = z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x,
    y) = z]
  module: null
  mutations:
  - lineno: 612
    operator: CRP
  number: 451
  status: killed
  tests_run: 7
  time: 0.3476879596710205
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200B39788>\nsource = '(x, y) = z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x,
    y) = z]
  module: null
  mutations:
  - lineno: 612
    operator: CRP
  number: 452
  status: killed
  tests_run: 7
  time: 0.3515045642852783
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200CD7848>\nsource = '(x, y) = z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x,
    y) = z]
  module: null
  mutations:
  - lineno: 612
    operator: CRP
  number: 453
  status: killed
  tests_run: 7
  time: 0.3474845886230469
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200C8C648>\nsource = '(x, y) = z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x,
    y) = z]
  module: null
  mutations:
  - lineno: 612
    operator: CRP
  number: 454
  status: killed
  tests_run: 7
  time: 0.34752821922302246
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 613
    operator: CRP
  number: 455
  status: survived
  tests_run: 316
  time: 0.7716903686523438
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252010A1C48>\nsource = '(x, y) = z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x,
    y) = z]
  module: null
  mutations:
  - lineno: 616
    operator: CRP
  number: 456
  status: killed
  tests_run: 7
  time: 0.351482629776001
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201092208>\nsource = '(x, y) = z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x,
    y) = z]
  module: null
  mutations:
  - lineno: 616
    operator: CRP
  number: 457
  status: killed
  tests_run: 7
  time: 0.3395366668701172
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201380648>\nsource = '(1,)'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(1,)]
  module: null
  mutations:
  - lineno: 619
    operator: CRP
  number: 458
  status: killed
  tests_run: 112
  time: 0.4864842891693115
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201540DC8>\nsource = '(1,)'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(1,)]
  module: null
  mutations:
  - lineno: 619
    operator: CRP
  number: 459
  status: killed
  tests_run: 112
  time: 0.4918384552001953
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252017A5948>\nsource = '[1, 2, 3]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[[1,
    2, 3]]
  module: null
  mutations:
  - lineno: 626
    operator: CRP
  number: 460
  status: killed
  tests_run: 106
  time: 0.4739654064178467
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201A0DA88>\nsource = '[1, 2, 3]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[[1,
    2, 3]]
  module: null
  mutations:
  - lineno: 626
    operator: CRP
  number: 461
  status: killed
  tests_run: 106
  time: 0.4805130958557129
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520157AFC8>\nsource = '[]'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[[]]
  module: null
  mutations:
  - lineno: 631
    operator: CRP
  number: 462
  status: killed
  tests_run: 105
  time: 0.9947605133056641
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200CB01C8>\nsource = '[]'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[[]]
  module: null
  mutations:
  - lineno: 631
    operator: CRP
  number: 463
  status: killed
  tests_run: 105
  time: 0.4754016399383545
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527EFEA088>\nsource = '[]'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[[]]
  module: null
  mutations:
  - lineno: 631
    operator: CRP
  number: 464
  status: killed
  tests_run: 105
  time: 0.48330211639404297
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527605CE08>\nsource = '[]'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[[]]
  module: null
  mutations:
  - lineno: 631
    operator: CRP
  number: 465
  status: killed
  tests_run: 105
  time: 0.4842519760131836
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C9F8A48>\nsource = '{1, 2}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{1,
    2}]
  module: null
  mutations:
  - lineno: 632
    operator: CRP
  number: 466
  status: killed
  tests_run: 128
  time: 0.5117523670196533
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527487AB88>\nsource = '{1, 2}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{1,
    2}]
  module: null
  mutations:
  - lineno: 632
    operator: CRP
  number: 467
  status: killed
  tests_run: 128
  time: 0.5152826309204102
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527EDBE6C8>\nsource = '{1, 2}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{1,
    2}]
  module: null
  mutations:
  - lineno: 632
    operator: CRP
  number: 468
  status: killed
  tests_run: 128
  time: 0.5224659442901611
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DA47D08>\nsource = '{1, 2}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{1,
    2}]
  module: null
  mutations:
  - lineno: 632
    operator: CRP
  number: 469
  status: killed
  tests_run: 128
  time: 0.5152559280395508
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DB13D08>\nsource = '{}'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{}]
  module: null
  mutations:
  - lineno: 636
    operator: CRP
  number: 470
  status: killed
  tests_run: 107
  time: 0.4831712245941162
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F9AE988>\nsource = '{}'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{}]
  module: null
  mutations:
  - lineno: 636
    operator: CRP
  number: 471
  status: killed
  tests_run: 107
  time: 0.48729634284973145
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527CB12F48>\nsource = '{}'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{}]
  module: null
  mutations:
  - lineno: 636
    operator: CRP
  number: 472
  status: killed
  tests_run: 107
  time: 0.4881727695465088
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527FBC8648>\nsource = '{}'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{}]
  module: null
  mutations:
  - lineno: 636
    operator: CRP
  number: 473
  status: killed
  tests_run: 107
  time: 0.4834709167480469
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527FB1CB08>\nsource = \"{a: 3, b: 'c'}\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{a:
    3, b: ''c''}]'
  module: null
  mutations:
  - lineno: 639
    operator: CRP
  number: 474
  status: killed
  tests_run: 108
  time: 0.4939613342285156
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E374648>\nsource = \"{a: 3, b: 'c'}\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{a:
    3, b: ''c''}]'
  module: null
  mutations:
  - lineno: 639
    operator: CRP
  number: 475
  status: killed
  tests_run: 108
  time: 0.4804413318634033
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DEAC948>\nsource = \"{a: 3, b: 'c'}\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{a:
    3, b: ''c''}]'
  module: null
  mutations:
  - lineno: 642
    operator: CRP
  number: 476
  status: killed
  tests_run: 108
  time: 0.48650550842285156
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527FD6BE08>\nsource = \"{a: 3, b: 'c'}\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{a:
    3, b: ''c''}]'
  module: null
  mutations:
  - lineno: 642
    operator: CRP
  number: 477
  status: killed
  tests_run: 108
  time: 0.49214625358581543
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F5FE448>\nsource = '{**kwargs}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{**kwargs}]
  module: null
  mutations:
  - lineno: 644
    operator: CRP
  number: 478
  status: killed
  tests_run: 148
  time: 0.5343995094299316
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F8CEC08>\nsource = '{**kwargs}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{**kwargs}]
  module: null
  mutations:
  - lineno: 644
    operator: CRP
  number: 479
  status: killed
  tests_run: 148
  time: 0.5403845310211182
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E3176C8>\nsource = '(x + y) / z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    + y) / z]
  module: null
  mutations:
  - lineno: 648
    operator: CRP
  number: 480
  status: killed
  tests_run: 46
  time: 0.3995037078857422
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201E0F8C8>\nsource = '(x + y) / z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    + y) / z]
  module: null
  mutations:
  - lineno: 648
    operator: CRP
  number: 481
  status: killed
  tests_run: 46
  time: 0.3934307098388672
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201FCD188>\nsource = '(x + y) / z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    + y) / z]
  module: null
  mutations:
  - lineno: 648
    operator: CRP
  number: 482
  status: killed
  tests_run: 46
  time: 0.39659667015075684
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520217E608>\nsource = '(x + y) / z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    + y) / z]
  module: null
  mutations:
  - lineno: 648
    operator: CRP
  number: 483
  status: killed
  tests_run: 46
  time: 0.39946770668029785
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 650
    operator: CRP
  number: 484
  status: incompetent
  tests_run: 45
  time: 0.4193880558013916
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 650
    operator: CRP
  number: 485
  status: incompetent
  tests_run: 45
  time: 0.4166245460510254
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252027FCA08>\nsource = '(x and y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    and y)]
  module: null
  mutations:
  - lineno: 654
    operator: CRP
  number: 486
  status: killed
  tests_run: 42
  time: 0.39151763916015625
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202983A08>\nsource = '(x and y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    and y)]
  module: null
  mutations:
  - lineno: 654
    operator: CRP
  number: 487
  status: killed
  tests_run: 42
  time: 0.3953976631164551
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202BA9748>\nsource = '(x and y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    and y)]
  module: null
  mutations:
  - lineno: 654
    operator: CRP
  number: 488
  status: killed
  tests_run: 42
  time: 0.3915839195251465
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252021E0248>\nsource = '(x and y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    and y)]
  module: null
  mutations:
  - lineno: 654
    operator: CRP
  number: 489
  status: killed
  tests_run: 42
  time: 0.9507288932800293
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 657
    operator: CRP
  number: 490
  status: incompetent
  tests_run: 42
  time: 0.411867618560791
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 657
    operator: CRP
  number: 491
  status: incompetent
  tests_run: 42
  time: 0.41944193840026855
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200F63A48>\nsource = 'if (x < y) == (z < x):\\n    pass'\n\n   \
    \ @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    (x < y) == (z < x):\n    pass]
  module: null
  mutations:
  - lineno: 661
    operator: CRP
  number: 492
  status: killed
  tests_run: 62
  time: 0.43137240409851074
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201684448>\nsource = 'if (x < y) == (z < x):\\n    pass'\n\n   \
    \ @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    (x < y) == (z < x):\n    pass]
  module: null
  mutations:
  - lineno: 661
    operator: CRP
  number: 493
  status: killed
  tests_run: 62
  time: 0.4296262264251709
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BE14D88>\nsource = 'if (x < y) == (z < x):\\n    pass'\n\n   \
    \ @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    (x < y) == (z < x):\n    pass]
  module: null
  mutations:
  - lineno: 661
    operator: CRP
  number: 494
  status: killed
  tests_run: 62
  time: 0.42463064193725586
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F570188>\nsource = 'if (x < y) == (z < x):\\n    pass'\n\n   \
    \ @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    (x < y) == (z < x):\n    pass]
  module: null
  mutations:
  - lineno: 661
    operator: CRP
  number: 495
  status: killed
  tests_run: 62
  time: 0.4393649101257324
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 664
    operator: CRP
  number: 496
  status: incompetent
  tests_run: 28
  time: 0.39750051498413086
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 664
    operator: CRP
  number: 497
  status: incompetent
  tests_run: 28
  time: 0.4084892272949219
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E1D5D48>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 668
    operator: CRP
  number: 498
  status: killed
  tests_run: 47
  time: 0.41524720191955566
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200EF8448>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 668
    operator: CRP
  number: 499
  status: killed
  tests_run: 47
  time: 0.4035005569458008
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527BF09848>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 668
    operator: CRP
  number: 500
  status: killed
  tests_run: 47
  time: 0.4114718437194824
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277E66D48>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 668
    operator: CRP
  number: 501
  status: killed
  tests_run: 47
  time: 0.41140294075012207
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200DBB448>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 671
    operator: CRP
  number: 502
  status: killed
  tests_run: 44
  time: 0.39941930770874023
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C9ACFC8>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 671
    operator: CRP
  number: 503
  status: killed
  tests_run: 44
  time: 0.41149449348449707
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200A93B08>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 672
    operator: CRP
  number: 504
  status: killed
  tests_run: 44
  time: 0.3994579315185547
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201A89FC8>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 672
    operator: CRP
  number: 505
  status: killed
  tests_run: 44
  time: 0.4034113883972168
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520025FF88>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 674
    operator: CRP
  number: 506
  status: killed
  tests_run: 47
  time: 0.40952515602111816
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520042C3C8>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 674
    operator: CRP
  number: 507
  status: killed
  tests_run: 47
  time: 0.3966832160949707
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DA72C48>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 674
    operator: CRP
  number: 508
  status: killed
  tests_run: 47
  time: 0.39944958686828613
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520161AA88>\nsource = '-((-x) // y)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[-((-x)
    // y)]
  module: null
  mutations:
  - lineno: 674
    operator: CRP
  number: 509
  status: killed
  tests_run: 47
  time: 0.39857935905456543
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DF2B888>\nsource = 'x[y]'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y]]
  module: null
  mutations:
  - lineno: 680
    operator: CRP
  number: 510
  status: killed
  tests_run: 87
  time: 0.4563260078430176
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252010F2848>\nsource = 'x[y]'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y]]
  module: null
  mutations:
  - lineno: 680
    operator: CRP
  number: 511
  status: killed
  tests_run: 87
  time: 0.45940494537353516
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201161AC8>\nsource = 'x[y]'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y]]
  module: null
  mutations:
  - lineno: 680
    operator: CRP
  number: 512
  status: killed
  tests_run: 87
  time: 0.4513888359069824
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252017383C8>\nsource = 'x[y]'\n\n    @pytest.mark.parametrize(\"source\"\
    , roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n       \
    \ \"\"\"Check if converting code into AST and converting it back to code yields\
    \ the same code.\"\"\"\n        node = ast.parse(source)\n        generated =\
    \ to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y]]
  module: null
  mutations:
  - lineno: 680
    operator: CRP
  number: 513
  status: killed
  tests_run: 87
  time: 0.44956016540527344
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202DF5088>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 685
    operator: CRP
  number: 514
  status: killed
  tests_run: 88
  time: 0.4593343734741211
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203030AC8>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 685
    operator: CRP
  number: 515
  status: killed
  tests_run: 88
  time: 0.4553394317626953
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203269D88>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 691
    operator: CRP
  number: 516
  status: killed
  tests_run: 88
  time: 0.45515942573547363
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252034F1E48>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 691
    operator: CRP
  number: 517
  status: killed
  tests_run: 88
  time: 0.45543336868286133
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 692
    operator: CRP
  number: 518
  status: survived
  tests_run: 316
  time: 1.3546175956726074
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 692
    operator: CRP
  number: 519
  status: survived
  tests_run: 316
  time: 0.7891476154327393
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025275867C88>\nsource = 'x[1:2,3:4]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[1:2,3:4]]
  module: null
  mutations:
  - lineno: 706
    operator: CRP
  number: 520
  status: killed
  tests_run: 89
  time: 0.46454620361328125
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B343F48>\nsource = 'x[1:2,3:4]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[1:2,3:4]]
  module: null
  mutations:
  - lineno: 706
    operator: CRP
  number: 521
  status: killed
  tests_run: 89
  time: 0.4633309841156006
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D8E64C8>\nsource = 'def f():\\n    yield'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield]
  module: null
  mutations:
  - lineno: 710
    operator: CRP
  number: 522
  status: killed
  tests_run: 29
  time: 0.3922147750854492
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527EBCBF88>\nsource = 'def f():\\n    yield'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield]
  module: null
  mutations:
  - lineno: 710
    operator: CRP
  number: 523
  status: killed
  tests_run: 29
  time: 0.3754868507385254
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278984408>\nsource = 'def f():\\n    yield 5'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield 5]
  module: null
  mutations:
  - lineno: 712
    operator: CRP
  number: 524
  status: killed
  tests_run: 30
  time: 0.3794848918914795
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252000BD4C8>\nsource = 'def f():\\n    yield 5'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield 5]
  module: null
  mutations:
  - lineno: 712
    operator: CRP
  number: 525
  status: killed
  tests_run: 30
  time: 0.3747372627258301
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200F65448>\nsource = '(lambda: (yield))()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(lambda:
    (yield))()]'
  module: null
  mutations:
  - lineno: 716
    operator: CRP
  number: 526
  status: killed
  tests_run: 86
  time: 0.4823887348175049
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025277FF2E08>\nsource = '(lambda: (yield))()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(lambda:
    (yield))()]'
  module: null
  mutations:
  - lineno: 716
    operator: CRP
  number: 527
  status: killed
  tests_run: 86
  time: 0.4605441093444824
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252023FB6C8>\nsource = '(lambda: (yield))()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(lambda:
    (yield))()]'
  module: null
  mutations:
  - lineno: 716
    operator: CRP
  number: 528
  status: killed
  tests_run: 86
  time: 0.45729589462280273
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E2AFA88>\nsource = '(lambda: (yield))()'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(lambda:
    (yield))()]'
  module: null
  mutations:
  - lineno: 716
    operator: CRP
  number: 529
  status: killed
  tests_run: 86
  time: 0.4597337245941162
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527EF696C8>\nsource = 'lambda x: (x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (x)]'
  module: null
  mutations:
  - lineno: 717
    operator: CRP
  number: 530
  status: killed
  tests_run: 83
  time: 0.44852614402770996
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527989A588>\nsource = 'lambda x: (x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (x)]'
  module: null
  mutations:
  - lineno: 717
    operator: CRP
  number: 531
  status: killed
  tests_run: 83
  time: 0.4576566219329834
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201FCA108>\nsource = 'lambda x: (x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (x)]'
  module: null
  mutations:
  - lineno: 719
    operator: CRP
  number: 532
  status: killed
  tests_run: 83
  time: 0.4514327049255371
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201C06CC8>\nsource = 'lambda x: (x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (x)]'
  module: null
  mutations:
  - lineno: 719
    operator: CRP
  number: 533
  status: killed
  tests_run: 83
  time: 0.44734716415405273
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278DC1B08>\nsource = 'lambda x: (x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (x)]'
  module: null
  mutations:
  - lineno: 720
    operator: CRP
  number: 534
  status: killed
  tests_run: 83
  time: 0.450153112411499
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527B3B8A88>\nsource = 'lambda x: (x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (x)]'
  module: null
  mutations:
  - lineno: 720
    operator: CRP
  number: 535
  status: killed
  tests_run: 83
  time: 0.44739580154418945
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252021F1748>\nsource = 'lambda x: (x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (x)]'
  module: null
  mutations:
  - lineno: 720
    operator: CRP
  number: 536
  status: killed
  tests_run: 83
  time: 0.447359561920166
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201E37B08>\nsource = 'lambda x: (x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[lambda
    x: (x)]'
  module: null
  mutations:
  - lineno: 720
    operator: CRP
  number: 537
  status: killed
  tests_run: 83
  time: 0.4457073211669922
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520265F248>\nsource = 'x[...]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[...]]
  module: null
  mutations:
  - lineno: 724
    operator: CRP
  number: 538
  status: killed
  tests_run: 115
  time: 0.49256348609924316
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202A49588>\nsource = 'x[...]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[...]]
  module: null
  mutations:
  - lineno: 724
    operator: CRP
  number: 539
  status: killed
  tests_run: 115
  time: 0.49187445640563965
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201CC5F08>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 736
    operator: CRP
  number: 540
  status: killed
  tests_run: 109
  time: 0.49108195304870605
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520243C948>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 736
    operator: CRP
  number: 541
  status: killed
  tests_run: 109
  time: 0.4760308265686035
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252022CBE08>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 736
    operator: CRP
  number: 542
  status: killed
  tests_run: 109
  time: 0.48734521865844727
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203683348>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 736
    operator: CRP
  number: 543
  status: killed
  tests_run: 109
  time: 0.48393750190734863
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252037CA348>\nsource = '(x for x in y if x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    for x in y if x)]
  module: null
  mutations:
  - lineno: 737
    operator: CRP
  number: 544
  status: killed
  tests_run: 110
  time: 0.49129152297973633
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520243C048>\nsource = '(x for x in y if x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    for x in y if x)]
  module: null
  mutations:
  - lineno: 737
    operator: CRP
  number: 545
  status: killed
  tests_run: 110
  time: 1.0783798694610596
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201FA83C8>\nsource = '(x for x in y if x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    for x in y if x)]
  module: null
  mutations:
  - lineno: 737
    operator: CRP
  number: 546
  status: killed
  tests_run: 110
  time: 0.4917106628417969
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520201CD48>\nsource = '(x for x in y if x)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(x
    for x in y if x)]
  module: null
  mutations:
  - lineno: 737
    operator: CRP
  number: 547
  status: killed
  tests_run: 110
  time: 0.5037007331848145
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200779248>\nsource = '{x for x in y if x}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{x
    for x in y if x}]
  module: null
  mutations:
  - lineno: 738
    operator: CRP
  number: 548
  status: killed
  tests_run: 129
  time: 0.5192928314208984
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527EB6C908>\nsource = '{x for x in y if x}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{x
    for x in y if x}]
  module: null
  mutations:
  - lineno: 738
    operator: CRP
  number: 549
  status: killed
  tests_run: 129
  time: 0.5231881141662598
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200760908>\nsource = '{x for x in y if x}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{x
    for x in y if x}]
  module: null
  mutations:
  - lineno: 738
    operator: CRP
  number: 550
  status: killed
  tests_run: 129
  time: 0.509023904800415
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252015D4A08>\nsource = '{x for x in y if x}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[{x
    for x in y if x}]
  module: null
  mutations:
  - lineno: 738
    operator: CRP
  number: 551
  status: killed
  tests_run: 129
  time: 0.5192995071411133
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F5C77C8>\nsource = 'x = {y: z for (y, z) in a}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = {y: z for (y, z) in a}]'
  module: null
  mutations:
  - lineno: 742
    operator: CRP
  number: 552
  status: killed
  tests_run: 130
  time: 0.554302453994751
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200A243C8>\nsource = 'x = {y: z for (y, z) in a}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = {y: z for (y, z) in a}]'
  module: null
  mutations:
  - lineno: 742
    operator: CRP
  number: 553
  status: killed
  tests_run: 130
  time: 0.5233011245727539
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F3E8248>\nsource = 'x = {y: z for (y, z) in a}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = {y: z for (y, z) in a}]'
  module: null
  mutations:
  - lineno: 742
    operator: CRP
  number: 554
  status: killed
  tests_run: 130
  time: 0.5153021812438965
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D7EEE48>\nsource = 'x = {y: z for (y, z) in a}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = {y: z for (y, z) in a}]'
  module: null
  mutations:
  - lineno: 742
    operator: CRP
  number: 555
  status: killed
  tests_run: 130
  time: 0.5157771110534668
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520039CF88>\nsource = 'x = {y: z for (y, z) in a}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = {y: z for (y, z) in a}]'
  module: null
  mutations:
  - lineno: 744
    operator: CRP
  number: 556
  status: killed
  tests_run: 130
  time: 0.5224094390869141
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200DA7AC8>\nsource = 'x = {y: z for (y, z) in a}'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = {y: z for (y, z) in a}]'
  module: null
  mutations:
  - lineno: 744
    operator: CRP
  number: 557
  status: killed
  tests_run: 130
  time: 0.5300555229187012
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252008DD288>\nsource = 'y * (z if z > 1 else 1)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[y
    * (z if z > 1 else 1)]
  module: null
  mutations:
  - lineno: 750
    operator: CRP
  number: 558
  status: killed
  tests_run: 60
  time: 0.4457228183746338
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200FFCC88>\nsource = 'y * (z if z > 1 else 1)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[y
    * (z if z > 1 else 1)]
  module: null
  mutations:
  - lineno: 750
    operator: CRP
  number: 559
  status: killed
  tests_run: 60
  time: 0.420562744140625
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F3BB7C8>\nsource = 'y * (z if z > 1 else 1)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[y
    * (z if z > 1 else 1)]
  module: null
  mutations:
  - lineno: 750
    operator: CRP
  number: 560
  status: killed
  tests_run: 60
  time: 0.419771671295166
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200EFB7C8>\nsource = 'y * (z if z > 1 else 1)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[y
    * (z if z > 1 else 1)]
  module: null
  mutations:
  - lineno: 750
    operator: CRP
  number: 561
  status: killed
  tests_run: 60
  time: 0.41582751274108887
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F32E048>\nsource = 'x if y else z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    if y else z]
  module: null
  mutations:
  - lineno: 752
    operator: CRP
  number: 562
  status: killed
  tests_run: 59
  time: 0.4194366931915283
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F5FD388>\nsource = 'x if y else z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    if y else z]
  module: null
  mutations:
  - lineno: 752
    operator: CRP
  number: 563
  status: killed
  tests_run: 59
  time: 0.4233822822570801
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520050BE88>\nsource = 'x if y else z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    if y else z]
  module: null
  mutations:
  - lineno: 754
    operator: CRP
  number: 564
  status: killed
  tests_run: 59
  time: 0.4279918670654297
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201230388>\nsource = 'x if y else z'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    if y else z]
  module: null
  mutations:
  - lineno: 754
    operator: CRP
  number: 565
  status: killed
  tests_run: 59
  time: 0.41148996353149414
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E10BB48>\nsource = 'f(*args)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(*args)]
  module: null
  mutations:
  - lineno: 757
    operator: CRP
  number: 566
  status: killed
  tests_run: 102
  time: 0.4713113307952881
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202CBBB08>\nsource = 'f(*args)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(*args)]
  module: null
  mutations:
  - lineno: 757
    operator: CRP
  number: 567
  status: killed
  tests_run: 102
  time: 0.490342378616333
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 761
    operator: CRP
  number: 568
  status: survived
  tests_run: 316
  time: 0.7669181823730469
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 761
    operator: CRP
  number: 569
  status: survived
  tests_run: 316
  time: 0.7557129859924316
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 761
    operator: CRP
  number: 570
  status: survived
  tests_run: 316
  time: 0.7629683017730713
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 761
    operator: CRP
  number: 571
  status: survived
  tests_run: 316
  time: 0.773151159286499
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252051C3608>\nsource = 'import x as y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[import
    x as y]
  module: null
  mutations:
  - lineno: 768
    operator: CRP
  number: 572
  status: killed
  tests_run: 32
  time: 0.9703922271728516
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527EA68E08>\nsource = 'import x as y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[import
    x as y]
  module: null
  mutations:
  - lineno: 768
    operator: CRP
  number: 573
  status: killed
  tests_run: 32
  time: 0.3794856071472168
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203FA8D88>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 771
    operator: CRP
  number: 574
  status: killed
  tests_run: 109
  time: 0.4992823600769043
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E0940C8>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 771
    operator: CRP
  number: 575
  status: killed
  tests_run: 109
  time: 0.499941349029541
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203CE2888>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 773
    operator: CRP
  number: 576
  status: killed
  tests_run: 109
  time: 0.4873361587524414
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202993348>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 773
    operator: CRP
  number: 577
  status: killed
  tests_run: 109
  time: 0.49161624908447266
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252023DB488>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 777
    operator: CRP
  number: 578
  status: killed
  tests_run: 109
  time: 0.4877440929412842
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520258C088>\nsource = 'x = [y.value for y in z if y.value >= 3]'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = [y.value for y in z if y.value >= 3]]
  module: null
  mutations:
  - lineno: 777
    operator: CRP
  number: 579
  status: killed
  tests_run: 109
  time: 0.4913337230682373
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025205054348>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 781
    operator: CRP
  number: 580
  status: killed
  tests_run: 71
  time: 0.4335947036743164
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DBD3C88>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 781
    operator: CRP
  number: 581
  status: killed
  tests_run: 71
  time: 0.4373490810394287
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252036F0788>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 783
    operator: CRP
  number: 582
  status: killed
  tests_run: 71
  time: 0.4433722496032715
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527DC5B048>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 783
    operator: CRP
  number: 583
  status: killed
  tests_run: 71
  time: 0.44947361946105957
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520281E908>\nsource = 'try:\\n    pass\\nexcept Y as y:\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y as y:\n    pass]
  module: null
  mutations:
  - lineno: 786
    operator: CRP
  number: 584
  status: killed
  tests_run: 73
  time: 0.43656373023986816
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527464F748>\nsource = 'try:\\n    pass\\nexcept Y as y:\\n    pass'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y as y:\n    pass]
  module: null
  mutations:
  - lineno: 786
    operator: CRP
  number: 585
  status: killed
  tests_run: 73
  time: 0.4433579444885254
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252001326C8>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 788
    operator: CRP
  number: 586
  status: killed
  tests_run: 71
  time: 0.4603579044342041
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202524AC8>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 788
    operator: CRP
  number: 587
  status: killed
  tests_run: 71
  time: 0.44443845748901367
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E137FC8>\nsource = \"assert True, 'message'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[assert
    True, 'message']
  module: null
  mutations:
  - lineno: 795
    operator: CRP
  number: 588
  status: killed
  tests_run: 81
  time: 0.45197248458862305
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527EFFCF88>\nsource = \"assert True, 'message'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[assert
    True, 'message']
  module: null
  mutations:
  - lineno: 795
    operator: CRP
  number: 589
  status: killed
  tests_run: 81
  time: 0.4536552429199219
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252037662C8>\nsource = \"assert True, 'message'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[assert
    True, 'message']
  module: null
  mutations:
  - lineno: 798
    operator: CRP
  number: 590
  status: killed
  tests_run: 81
  time: 0.45232391357421875
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202815348>\nsource = \"assert True, 'message'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[assert
    True, 'message']
  module: null
  mutations:
  - lineno: 798
    operator: CRP
  number: 591
  status: killed
  tests_run: 81
  time: 0.45641565322875977
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 802
    operator: CRP
  number: 592
  status: survived
  tests_run: 316
  time: 0.7704887390136719
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 802
    operator: CRP
  number: 593
  status: survived
  tests_run: 316
  time: 0.7829909324645996
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 815
    operator: CRP
  number: 594
  status: survived
  tests_run: 316
  time: 0.778897762298584
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 815
    operator: CRP
  number: 595
  status: survived
  tests_run: 316
  time: 0.7709190845489502
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252053134C8>\nsource = 'try:\\n    pass\\nfinally:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nfinally:\n    pass]
  module: null
  mutations:
  - lineno: 820
    operator: CRP
  number: 596
  status: killed
  tests_run: 74
  time: 0.4380934238433838
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520553FB08>\nsource = 'try:\\n    pass\\nfinally:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nfinally:\n    pass]
  module: null
  mutations:
  - lineno: 820
    operator: CRP
  number: 597
  status: killed
  tests_run: 74
  time: 0.43146395683288574
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 827
    operator: CRP
  number: 598
  status: survived
  tests_run: 316
  time: 0.7663204669952393
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 827
    operator: CRP
  number: 599
  status: survived
  tests_run: 316
  time: 0.7669265270233154
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 830
    operator: CRP
  number: 600
  status: survived
  tests_run: 316
  time: 1.409322738647461
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 830
    operator: CRP
  number: 601
  status: survived
  tests_run: 316
  time: 0.7845807075500488
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 832
    operator: CRP
  number: 602
  status: survived
  tests_run: 316
  time: 0.7710103988647461
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 832
    operator: CRP
  number: 603
  status: survived
  tests_run: 316
  time: 0.7702205181121826
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 837
    operator: CRP
  number: 604
  status: survived
  tests_run: 316
  time: 0.7831487655639648
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 837
    operator: CRP
  number: 605
  status: survived
  tests_run: 316
  time: 0.7669644355773926
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527F4C5148>\nsource = 'if not False:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    not False:\n    pass]
  module: null
  mutations:
  - lineno: 841
    operator: CRP
  number: 606
  status: killed
  tests_run: 63
  time: 0.4274711608886719
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 841
    operator: CRP
  number: 607
  status: survived
  tests_run: 316
  time: 0.7720241546630859
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527C519848>\nsource = 'if not False:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    not False:\n    pass]
  module: null
  mutations:
  - lineno: 845
    operator: CRP
  number: 608
  status: killed
  tests_run: 63
  time: 0.4393653869628906
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 845
    operator: CRP
  number: 609
  status: survived
  tests_run: 316
  time: 0.7674074172973633
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 849
    operator: CRP
  number: 610
  status: survived
  tests_run: 316
  time: 0.7740323543548584
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 849
    operator: CRP
  number: 611
  status: survived
  tests_run: 316
  time: 0.7799921035766602
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200E493C8>\nsource = 'class A(B, C):\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    A(B, C):\n    pass]
  module: null
  mutations:
  - lineno: 856
    operator: CRP
  number: 612
  status: killed
  tests_run: 22
  time: 0.371504545211792
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520312FA88>\nsource = 'class A(B, C):\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    A(B, C):\n    pass]
  module: null
  mutations:
  - lineno: 856
    operator: CRP
  number: 613
  status: killed
  tests_run: 22
  time: 0.3639969825744629
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201F72A48>\nsource = 'class A(B, C):\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    A(B, C):\n    pass]
  module: null
  mutations:
  - lineno: 859
    operator: CRP
  number: 614
  status: killed
  tests_run: 22
  time: 0.36350536346435547
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203ADC488>\nsource = 'class A(B, C):\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    A(B, C):\n    pass]
  module: null
  mutations:
  - lineno: 859
    operator: CRP
  number: 615
  status: killed
  tests_run: 22
  time: 0.3794410228729248
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 863
    operator: CRP
  number: 616
  status: incompetent
  tests_run: 16
  time: 0.37949562072753906
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 863
    operator: CRP
  number: 617
  status: incompetent
  tests_run: 16
  time: 0.3657341003417969
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203358308>\nsource = 'class X(Y, metaclass=Z):\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    X(Y, metaclass=Z):\n    pass]
  module: null
  mutations:
  - lineno: 867
    operator: CRP
  number: 618
  status: killed
  tests_run: 136
  time: 0.5192947387695312
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203DD16C8>\nsource = 'class X(Y, metaclass=Z):\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    X(Y, metaclass=Z):\n    pass]
  module: null
  mutations:
  - lineno: 867
    operator: CRP
  number: 619
  status: killed
  tests_run: 136
  time: 0.5257067680358887
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252004D01C8>\nsource = 'class A(B, C):\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    A(B, C):\n    pass]
  module: null
  mutations:
  - lineno: 871
    operator: CRP
  number: 620
  status: killed
  tests_run: 22
  time: 0.36472201347351074
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203C11608>\nsource = 'class A(B, C):\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    A(B, C):\n    pass]
  module: null
  mutations:
  - lineno: 871
    operator: CRP
  number: 621
  status: killed
  tests_run: 22
  time: 0.36351585388183594
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025205173C08>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 871
    operator: CRP
  number: 622
  status: killed
  tests_run: 16
  time: 0.3597233295440674
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025205DA27C8>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 871
    operator: CRP
  number: 623
  status: killed
  tests_run: 16
  time: 0.36339640617370605
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 877
    operator: CRP
  number: 624
  status: incompetent
  tests_run: 19
  time: 0.3914330005645752
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 877
    operator: CRP
  number: 625
  status: incompetent
  tests_run: 19
  time: 0.3714911937713623
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025206297648>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 879
    operator: CRP
  number: 626
  status: killed
  tests_run: 19
  time: 0.3594791889190674
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025206439E48>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 879
    operator: CRP
  number: 627
  status: killed
  tests_run: 19
  time: 0.3615531921386719
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252066A0688>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 880
    operator: CRP
  number: 628
  status: killed
  tests_run: 137
  time: 0.5153028964996338
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252004F2408>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 880
    operator: CRP
  number: 629
  status: killed
  tests_run: 137
  time: 1.179006814956665
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201519F48>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 881
    operator: CRP
  number: 630
  status: killed
  tests_run: 137
  time: 0.5272812843322754
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252004A8708>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 881
    operator: CRP
  number: 631
  status: killed
  tests_run: 137
  time: 0.5391702651977539
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252021FA188>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 883
    operator: CRP
  number: 632
  status: killed
  tests_run: 19
  time: 0.3754539489746094
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203904088>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 883
    operator: CRP
  number: 633
  status: killed
  tests_run: 19
  time: 0.3674938678741455
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 888
    operator: CRP
  number: 634
  status: survived
  tests_run: 316
  time: 0.7717478275299072
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 888
    operator: CRP
  number: 635
  status: survived
  tests_run: 316
  time: 0.7669219970703125
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 892
    operator: CRP
  number: 636
  status: survived
  tests_run: 316
  time: 0.774848461151123
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 892
    operator: CRP
  number: 637
  status: survived
  tests_run: 316
  time: 0.7667028903961182
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 896
    operator: CRP
  number: 638
  status: survived
  tests_run: 316
  time: 0.7749142646789551
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 896
    operator: CRP
  number: 639
  status: survived
  tests_run: 316
  time: 0.7820191383361816
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520289E488>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 899
    operator: CRP
  number: 640
  status: killed
  tests_run: 71
  time: 0.45134639739990234
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252024DD1C8>\nsource = 'try:\\n    pass\\nexcept Y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[try:\n    pass\nexcept
    Y:\n    pass]
  module: null
  mutations:
  - lineno: 899
    operator: CRP
  number: 641
  status: killed
  tests_run: 71
  time: 0.43142271041870117
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520258C0C8>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 910
    operator: CRP
  number: 642
  status: killed
  tests_run: 79
  time: 0.44429802894592285
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252057C2108>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 910
    operator: CRP
  number: 643
  status: killed
  tests_run: 79
  time: 0.4473586082458496
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200F3F6C8>\nsource = 'with x as y:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x as y:\n    pass]
  module: null
  mutations:
  - lineno: 914
    operator: CRP
  number: 644
  status: killed
  tests_run: 80
  time: 0.45134687423706055
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D26FC08>\nsource = 'with x as y:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x as y:\n    pass]
  module: null
  mutations:
  - lineno: 914
    operator: CRP
  number: 645
  status: killed
  tests_run: 80
  time: 0.44065356254577637
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252053AC088>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:823: in visit_With\n    ???\n_\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x000002527BCF2AC8>\n\
    node = <_ast.With object at 0x0000025201372248>, prefixes = []\n\n>   ???\nE \
    \  IndexError: list index out of range\n\nvisitors:916: IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 916
    operator: CRP
  number: 646
  status: killed
  tests_run: 79
  time: 0.45539093017578125
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025205A2CB48>\nsource = 'with x, y:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x, y:\n    pass]
  module: null
  mutations:
  - lineno: 917
    operator: CRP
  number: 647
  status: killed
  tests_run: 146
  time: 0.5432748794555664
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202B382C8>\nsource = 'with x, y:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x, y:\n    pass]
  module: null
  mutations:
  - lineno: 917
    operator: CRP
  number: 648
  status: killed
  tests_run: 146
  time: 0.5342230796813965
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025202B94588>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 918
    operator: CRP
  number: 649
  status: killed
  tests_run: 79
  time: 0.4433567523956299
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203871648>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 918
    operator: CRP
  number: 650
  status: killed
  tests_run: 79
  time: 0.4429631233215332
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025205492EC8>\nsource = 'def f():\\n    yield from x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield from x]
  module: null
  mutations:
  - lineno: 922
    operator: CRP
  number: 651
  status: killed
  tests_run: 147
  time: 0.5483570098876953
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252052393C8>\nsource = 'def f():\\n    yield from x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield from x]
  module: null
  mutations:
  - lineno: 922
    operator: CRP
  number: 652
  status: killed
  tests_run: 147
  time: 0.5312392711639404
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 927
    operator: CRP
  number: 653
  status: survived
  tests_run: 316
  time: 0.7674098014831543
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 927
    operator: CRP
  number: 654
  status: survived
  tests_run: 316
  time: 0.7629778385162354
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 944
    operator: CRP
  number: 655
  status: survived
  tests_run: 316
  time: 0.7574355602264404
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520711CD88>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 944
    operator: CRP
  number: 656
  status: killed
  tests_run: 154
  time: 0.5392611026763916
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520526F948>\nsource = 'async def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    pass]
  module: null
  mutations:
  - lineno: 947
    operator: CRP
  number: 657
  status: killed
  tests_run: 149
  time: 1.2116575241088867
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252057C27C8>\nsource = 'async def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    pass]
  module: null
  mutations:
  - lineno: 947
    operator: CRP
  number: 658
  status: killed
  tests_run: 149
  time: 0.5562744140625
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200775CC8>\nsource = 'async def f():\\n    async for line in reader:\\\
    n        pass'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    async for line in reader:\n        pass]
  module: null
  mutations:
  - lineno: 950
    operator: CRP
  number: 659
  status: killed
  tests_run: 150
  time: 0.5519261360168457
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025203D92948>\nsource = 'async def f():\\n    async for line in reader:\\\
    n        pass'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    async for line in reader:\n        pass]
  module: null
  mutations:
  - lineno: 950
    operator: CRP
  number: 660
  status: killed
  tests_run: 150
  time: 0.5571579933166504
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E35C648>\nsource = 'async def f():\\n    async with x:\\n    \
    \    pass'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n \
    \   def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    async with x:\n        pass]
  module: null
  mutations:
  - lineno: 953
    operator: CRP
  number: 661
  status: killed
  tests_run: 152
  time: 0.5404880046844482
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252004CD688>\nsource = 'async def f():\\n    async with x:\\n    \
    \    pass'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n \
    \   def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n        generated = to_source(node)\n>     \
    \  assert source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    async with x:\n        pass]
  module: null
  mutations:
  - lineno: 953
    operator: CRP
  number: 662
  status: killed
  tests_run: 152
  time: 0.5522232055664062
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201C34808>\nsource = 'async def f():\\n    await asyncio.sleep(1)'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    await asyncio.sleep(1)]
  module: null
  mutations:
  - lineno: 956
    operator: CRP
  number: 663
  status: killed
  tests_run: 151
  time: 0.5476961135864258
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252004C9548>\nsource = 'async def f():\\n    await asyncio.sleep(1)'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    await asyncio.sleep(1)]
  module: null
  mutations:
  - lineno: 956
    operator: CRP
  number: 664
  status: killed
  tests_run: 151
  time: 0.5472214221954346
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252010FB908>\nsource = 'async def f():\\n    await asyncio.sleep(1)'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    await asyncio.sleep(1)]
  module: null
  mutations:
  - lineno: 957
    operator: CRP
  number: 665
  status: killed
  tests_run: 151
  time: 0.5542199611663818
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025205C049C8>\nsource = 'async def f():\\n    await asyncio.sleep(1)'\n\
    \n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[async
    def f():\n    await asyncio.sleep(1)]
  module: null
  mutations:
  - lineno: 957
    operator: CRP
  number: 666
  status: killed
  tests_run: 151
  time: 0.5490994453430176
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520331B188>\nsource = '(a, b) = enumerate(c)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(a,
    b) = enumerate(c)]
  module: null
  mutations:
  - lineno: 962
    operator: CRP
  number: 667
  status: killed
  tests_run: 10
  time: 0.3514742851257324
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527D66A548>\nsource = '(a, b) = enumerate(c)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(a,
    b) = enumerate(c)]
  module: null
  mutations:
  - lineno: 962
    operator: CRP
  number: 668
  status: killed
  tests_run: 10
  time: 0.36605000495910645
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527AA5FF08>\nsource = '(a, b) = enumerate(c)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(a,
    b) = enumerate(c)]
  module: null
  mutations:
  - lineno: 962
    operator: CRP
  number: 669
  status: killed
  tests_run: 10
  time: 0.3542463779449463
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252051A1948>\nsource = '(a, b) = enumerate(c)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(a,
    b) = enumerate(c)]
  module: null
  mutations:
  - lineno: 962
    operator: CRP
  number: 670
  status: killed
  tests_run: 10
  time: 0.34047484397888184
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520079BF48>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 997
    operator: CRP
  number: 671
  status: killed
  tests_run: 154
  time: 0.5598211288452148
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 997
    operator: CRP
  number: 672
  status: survived
  tests_run: 316
  time: 0.7680890560150146
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002520152DF08>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1000
    operator: CRP
  number: 673
  status: killed
  tests_run: 154
  time: 0.5432376861572266
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200774108>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1000
    operator: CRP
  number: 674
  status: killed
  tests_run: 154
  time: 0.5598933696746826
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252066CE8C8>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1001
    operator: CRP
  number: 675
  status: killed
  tests_run: 154
  time: 0.5432343482971191
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025205D3CF08>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1001
    operator: CRP
  number: 676
  status: killed
  tests_run: 154
  time: 0.5506176948547363
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025206839148>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1001
    operator: CRP
  number: 677
  status: killed
  tests_run: 154
  time: 0.5393195152282715
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252050F48C8>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1001
    operator: CRP
  number: 678
  status: killed
  tests_run: 154
  time: 0.5472619533538818
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 1004
    operator: CRP
  number: 679
  status: survived
  tests_run: 316
  time: 0.7615346908569336
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 1004
    operator: CRP
  number: 680
  status: survived
  tests_run: 316
  time: 0.7713634967803955
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 1004
    operator: CRP
  number: 681
  status: survived
  tests_run: 316
  time: 0.760197639465332
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 1004
    operator: CRP
  number: 682
  status: survived
  tests_run: 316
  time: 0.7702014446258545
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025207AAC608>\nsource = 'f\"a\\'b\"'\n\n    @pytest.mark.parametrize(\"\
    source\", semantic_testdata)\n    def test_codegen_semantic_preservation(self,\
    \ source):\n        \"\"\"Check if converting code into AST, converting it back\
    \ to code\n        and converting it into an AST again yields the same AST.\n\
    \        \"\"\"\n        node = ast.parse(source)\n        generated = to_source(node)\n\
    >       node_from_generated = ast.parse(generated)\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:402: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsource = \"f'a'b'\", filename = '<unknown>', mode\
    \ = 'exec'\n\n    def parse(source, filename='<unknown>', mode='exec'):\n    \
    \    \"\"\"\n        Parse the source into an AST node.\n        Equivalent to\
    \ compile(source, filename, mode, PyCF_ONLY_AST).\n        \"\"\"\n>       return\
    \ compile(source, filename, mode, PyCF_ONLY_AST)\nE         File \"<unknown>\"\
    , line 1\nE           f'a'b'\nE                ^\nE       SyntaxError: EOL while\
    \ scanning string literal\n\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\\
    ast.py:35: SyntaxError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_semantic_preservation[f"a'b"]
  module: null
  mutations:
  - lineno: 1004
    operator: CRP
  number: 683
  status: killed
  tests_run: 315
  time: 0.7712819576263428
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025207D0A648>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1004
    operator: CRP
  number: 684
  status: killed
  tests_run: 154
  time: 0.5471937656402588
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025207F77A48>\nsource = 'f\"a\\'b\"'\n\n    @pytest.mark.parametrize(\"\
    source\", semantic_testdata)\n    def test_codegen_semantic_preservation(self,\
    \ source):\n        \"\"\"Check if converting code into AST, converting it back\
    \ to code\n        and converting it into an AST again yields the same AST.\n\
    \        \"\"\"\n        node = ast.parse(source)\n        generated = to_source(node)\n\
    \        node_from_generated = ast.parse(generated)\n>       assert ast.dump(node)\
    \ == ast.dump(node_from_generated)\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:403: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_semantic_preservation[f"a'b"]
  module: null
  mutations:
  - lineno: 1004
    operator: CRP
  number: 685
  status: killed
  tests_run: 315
  time: 0.7630224227905273
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025205031048>\nsource = 'f\"a\\'b\"'\n\n    @pytest.mark.parametrize(\"\
    source\", semantic_testdata)\n    def test_codegen_semantic_preservation(self,\
    \ source):\n        \"\"\"Check if converting code into AST, converting it back\
    \ to code\n        and converting it into an AST again yields the same AST.\n\
    \        \"\"\"\n        node = ast.parse(source)\n        generated = to_source(node)\n\
    \        node_from_generated = ast.parse(generated)\n>       assert ast.dump(node)\
    \ == ast.dump(node_from_generated)\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:403: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_semantic_preservation[f"a'b"]
  module: null
  mutations:
  - lineno: 1004
    operator: CRP
  number: 686
  status: killed
  tests_run: 315
  time: 1.5156924724578857
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252016BFC48>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1009
    operator: CRP
  number: 687
  status: killed
  tests_run: 154
  time: 0.5592093467712402
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527E33D588>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1009
    operator: CRP
  number: 688
  status: killed
  tests_run: 154
  time: 0.551253080368042
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025200B20348>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1010
    operator: CRP
  number: 689
  status: killed
  tests_run: 154
  time: 0.5514802932739258
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000002527ED27648>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1010
    operator: CRP
  number: 690
  status: killed
  tests_run: 154
  time: 0.5515899658203125
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025201384048>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1010
    operator: CRP
  number: 691
  status: killed
  tests_run: 154
  time: 0.5552554130554199
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000252051CFCC8>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1010
    operator: CRP
  number: 692
  status: killed
  tests_run: 154
  time: 0.5442688465118408
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x0000025278629208>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:391: in visit_Expr\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:281: in generic_visit\n\
    \    self.visit(value)\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:1006:\
    \ in visit_JoinedStr\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x00000252001AC608>\n\
    node = <_ast.FormattedValue object at 0x0000025278629B08>\n\n>   ???\nE   OverflowError:\
    \ %c arg not in range(0x110000)\n\nvisitors:1013: OverflowError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1012
    operator: CRP
  number: 693
  status: killed
  tests_run: 154
  time: 0.5791752338409424
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 1013
    operator: CRP
  number: 694
  status: incompetent
  tests_run: 155
  time: 0.5710160732269287
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 1013
    operator: CRP
  number: 695
  status: incompetent
  tests_run: 155
  time: 0.5791800022125244
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 192
    operator: DDL
  number: 696
  status: survived
  tests_run: 316
  time: 0.7909445762634277
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 200
    operator: DDL
  number: 697
  status: survived
  tests_run: 316
  time: 0.7631912231445312
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 209
    operator: DDL
  number: 698
  status: survived
  tests_run: 316
  time: 0.7629814147949219
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001BB3983F908>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x000001BB398F7048>\nstatements = [<_ast.Assign object at 0x000001BB398E3088>],\
    \ indent = 0\n\n>   ???\nE   AttributeError: __enter__\n\nvisitors:269: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 226
    operator: DDL
  number: 699
  status: killed
  tests_run: 6
  time: 0.35952067375183105
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001BB391E4B08>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:361: in visit_Assign\n    ???\n\
    visitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\\
    lib\\ast.py:271: in visit\n    return visitor(node)\n_ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x000001BB391E4048>\nnode = <_ast.Num object at 0x000001BB391E4908>\n\
    \n>   ???\nE   AttributeError: __enter__\n\nvisitors:608: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 232
    operator: DDL
  number: 700
  status: killed
  tests_run: 6
  time: 0.36351943016052246
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 835
    operator: DDL
  number: 701
  status: survived
  tests_run: 316
  time: 0.7712094783782959
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 938
    operator: DDL
  number: 702
  status: incompetent
  tests_run: 47
  time: 0.4873497486114502
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 967
    operator: DDL
  number: 703
  status: incompetent
  tests_run: 10
  time: 0.4324018955230713
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 978
    operator: DDL
  number: 704
  status: incompetent
  tests_run: 10
  time: 0.3594846725463867
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 845
    operator: IHD
  number: 705
  status: survived
  tests_run: 316
  time: 0.7514102458953857
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 849
    operator: IHD
  number: 706
  status: survived
  tests_run: 316
  time: 0.7832014560699463
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 888
    operator: IHD
  number: 707
  status: survived
  tests_run: 316
  time: 0.746859073638916
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 892
    operator: IHD
  number: 708
  status: survived
  tests_run: 316
  time: 0.786027193069458
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 896
    operator: IHD
  number: 709
  status: survived
  tests_run: 316
  time: 0.7641286849975586
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 927
    operator: IHD
  number: 710
  status: survived
  tests_run: 316
  time: 0.7953143119812012
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 944
    operator: IHD
  number: 711
  status: survived
  tests_run: 316
  time: 0.7550323009490967
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F0A452ECC8>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 997
    operator: IHD
  number: 712
  status: killed
  tests_run: 154
  time: 0.551318883895874
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x000001F41E63EB88>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x000001F41E63ED48>\n\n    def\
    \ test_has_edge(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n>       visitor.visit(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:25:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\n\nself = <visitors.GraphNodeVisitor object at 0x000001F41E63ED48>\nnode\
    \ = <_ast.Module object at 0x000001F41E63EDC8>\n\n>   ???\nE   AttributeError:\
    \ 'GraphNodeVisitor' object has no attribute 'graph'\n\nvisitors:18: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 13
    operator: IOD
  number: 713
  status: killed
  tests_run: 1
  time: 0.33550071716308594
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x000001F41E177A08>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x000001F41E177B88>\n\n    def\
    \ test_has_edge(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n>       assert visitor.graph.get_edge(str(node),\
    \ str(node.body[0]))\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:27:\
    \ AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 16
    operator: IOD
  number: 714
  status: killed
  tests_run: 1
  time: 0.36792564392089844
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F41EA00CC8>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:135: in to_source\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\\
    lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:167: in generic_visit\n\
    \    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _\n\nself = <visitors.FixLinenoNodeVisitor object at 0x000001F41E4F2F48>\n\
    node = <_ast.Module object at 0x000001F41E9F3708>\n\n>   ???\nE   AttributeError:\
    \ 'FixLinenoNodeVisitor' object has no attribute 'min_lineno'\n\nvisitors:177:\
    \ AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 160
    operator: IOD
  number: 715
  status: killed
  tests_run: 6
  time: 0.3514823913574219
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F41E9FAC48>\n\n    def test_fix_linen_umbers(self):\n        \"\"\
    \"Check if an AST with wrong lineno attribute is corrected in the process.\"\"\
    \"\n        node = ast.parse('x = 1' + self.EOL + 'y = 2')\n        # set both\
    \ line numbers to 1\n        node.body[1].lineno = 1\n        to_source(node)\n\
    >       assert node.body[1].lineno == 2\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:411: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_fix_linen_umbers
  module: null
  mutations:
  - lineno: 163
    operator: IOD
  number: 716
  status: killed
  tests_run: 316
  time: 0.8027670383453369
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 187
    operator: IOD
  number: 717
  status: incompetent
  tests_run: 6
  time: 0.3441469669342041
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F420036748>\nsource = 'def f():\\n    return x == \\\\\\n       \
    \ x'\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def\
    \ test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting code\
    \ into AST and converting it back to code yields the same code.\"\"\"\n      \
    \  node = ast.parse(source)\n        generated = to_source(node)\n>       assert\
    \ source == generated\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\\
    test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    return x == \\\n        x]
  module: null
  mutations:
  - lineno: 345
    operator: IOD
  number: 718
  status: killed
  tests_run: 28
  time: 0.37544894218444824
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F42013A108>\nsource = 'class X(Y, metaclass=Z):\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    X(Y, metaclass=Z):\n    pass]
  module: null
  mutations:
  - lineno: 851
    operator: IOD
  number: 719
  status: killed
  tests_run: 136
  time: 0.5272455215454102
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F4203F39C8>\nsource = 'def f(a: str) -> str:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: 'src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f(a: str) -> str:\n    pass]'
  module: null
  mutations:
  - lineno: 874
    operator: IOD
  number: 720
  status: killed
  tests_run: 137
  time: 0.5165190696716309
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F4205FBC08>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:823: in visit_With\n    ???\n_\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x000001F4205FBEC8>\n\
    node = <_ast.With object at 0x000001F4205FBD08>, prefixes = []\n\n>   ???\nE \
    \  AttributeError: 'With' object has no attribute 'context_expr'\n\nvisitors:828:\
    \ AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 908
    operator: IOD
  number: 721
  status: killed
  tests_run: 79
  time: 0.4474046230316162
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 932
    operator: IOD
  number: 722
  status: survived
  tests_run: 316
  time: 0.8108210563659668
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F4209D8588>\nsource = 'if not False:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    not False:\n    pass]
  module: null
  mutations:
  - lineno: 938
    operator: IOD
  number: 723
  status: killed
  tests_run: 63
  time: 0.4199650287628174
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F420BFF608>\nsource = 'f(a, b=1, *args, **kwargs)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(a,
    b=1, *args, **kwargs)]
  module: null
  mutations:
  - lineno: 960
    operator: IOD
  number: 724
  status: killed
  tests_run: 104
  time: 0.4753105640411377
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F420E08808>\nsource = 'f(*args)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(*args)]
  module: null
  mutations:
  - lineno: 989
    operator: IOD
  number: 725
  status: killed
  tests_run: 102
  time: 0.46798253059387207
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001F421031F08>\nsource = 'f(**kwargs)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(**kwargs)]
  module: null
  mutations:
  - lineno: 992
    operator: IOD
  number: 726
  status: killed
  tests_run: 103
  time: 0.4718472957611084
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 16
    operator: IOP
  number: 727
  status: survived
  tests_run: 316
  time: 0.7810800075531006
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C842946888>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:135: in to_source\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\\
    lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:167: in generic_visit\n\
    \    ???\nvisitors:178: in _process_body\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n_ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n\
    self = <visitors.FixLinenoNodeVisitor object at 0x000001C842935D08>\nnode = <_ast.Assign\
    \ object at 0x000001C842935648>\n\n>   ???\nE   AttributeError: 'Assign' object\
    \ has no attribute 'body'\n\nvisitors:166: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 166
    operator: LCR
  number: 728
  status: killed
  tests_run: 6
  time: 0.3674583435058594
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C843AA5088>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:346: in visit\n    ???\nvisitors:244:\
    \ in correct_line_number\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'visitors.SourceGeneratorNodeVisitorPython36'>\n\
    node = <_ast.Module object at 0x000001C843A96E88>, arg_name = 'lineno'\n\n>  \
    \ ???\nE   AttributeError: 'Module' object has no attribute 'lineno'\n\nvisitors:194:\
    \ AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 194
    operator: LCR
  number: 729
  status: killed
  tests_run: 6
  time: 0.37172818183898926
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C843CA5688>\nsource = 'def f():\\n    yield'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:884: in visit_FunctionDef\n   \
    \ ???\nvisitors:271: in body\n    ???\nvisitors:251: in correct_line_number\n\
    \    ???\nvisitors:254: in add_missing_lines\n    ???\nvisitors:222: in _newline_needed\n\
    \    ???\nvisitors:203: in _get_actual_lineno\n    ???\n_ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Expr\
    \ object at 0x000001C843CA5848>\n\n>   ???\nE   AttributeError: 'Yield' object\
    \ has no attribute 's'\n\nvisitors:213: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield]
  module: null
  mutations:
  - lineno: 202
    operator: LCR
  number: 730
  status: killed
  tests_run: 29
  time: 0.39183473587036133
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C843E64808>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:346: in visit\n    ???\nvisitors:251:\
    \ in correct_line_number\n    ???\nvisitors:254: in add_missing_lines\n    ???\n\
    visitors:222: in _newline_needed\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'visitors.SourceGeneratorNodeVisitorPython36'>\n\
    node = <_ast.Module object at 0x000001C843E4F388>\n\n>   ???\nE   AttributeError:\
    \ 'Module' object has no attribute 'lineno'\n\nvisitors:206: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 244
    operator: LCR
  number: 731
  status: killed
  tests_run: 6
  time: 0.3514847755432129
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C843A82748>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 258
    operator: LCR
  number: 732
  status: killed
  tests_run: 6
  time: 0.3754997253417969
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C844183788>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 321
    operator: LCR
  number: 733
  status: killed
  tests_run: 19
  time: 0.37534546852111816
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C8443B7988>\nsource = 'from x import y'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[from
    x import y]
  module: null
  mutations:
  - lineno: 377
    operator: LCR
  number: 734
  status: killed
  tests_run: 35
  time: 0.3794829845428467
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 433
    operator: LCR
  number: 735
  status: survived
  tests_run: 316
  time: 0.8070113658905029
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 433
    operator: LCR
  number: 736
  status: survived
  tests_run: 316
  time: 0.766930341720581
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C844889D08>\nsource = 'if x:\\n    pass\\nelse:\\n    pass'\n\n \
    \   @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    >       generated = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n\
    ..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n   \
    \ return visitor(node)\nvisitors:352: in visit_Module\n    ???\nvisitors:272:\
    \ in body\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:437:\
    \ in visit_If\n    ???\nvisitors:449: in if_elif\n    ???\nvisitors:453: in if_or_else\n\
    \    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at\
    \ 0x000001C844986E08>\nnode = <_ast.Pass object at 0x000001C84498B0C8>, use_elif\
    \ = True\n\n>   ???\nE   AttributeError: 'Pass' object has no attribute 'test'\n\
    \nvisitors:445: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelse:\n    pass]
  module: null
  mutations:
  - lineno: 452
    operator: LCR
  number: 737
  status: killed
  tests_run: 53
  time: 0.4187333583831787
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C843F92708>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 674
    operator: LCR
  number: 738
  status: killed
  tests_run: 44
  time: 0.4326210021972656
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C844D299C8>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 692
    operator: LCR
  number: 739
  status: killed
  tests_run: 88
  time: 0.45208120346069336
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 837
    operator: LCR
  number: 740
  status: survived
  tests_run: 316
  time: 0.7550837993621826
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 871
    operator: LCR
  number: 741
  status: incompetent
  tests_run: 16
  time: 0.3754749298095703
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x000001C844F1FDC8>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 871
    operator: LCR
  number: 742
  status: killed
  tests_run: 16
  time: 0.4233834743499756
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 17
    operator: ROR
  number: 743
  status: survived
  tests_run: 316
  time: 0.7529385089874268
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000226BAEEE2C8>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x00000226BAD47CC8>\n\n    def\
    \ test_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n>       dot_node = visitor.graph.get_node(str(node.body[0].value))[0]\n\
    E       IndexError: list index out of range\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:41:\
    \ IndexError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_node_label
  module: null
  mutations:
  - lineno: 17
    operator: ROR
  number: 744
  status: killed
  tests_run: 3
  time: 0.383725643157959
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000226BB0F4E08>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x00000226BAF1F148>\n\n    def\
    \ test_has_edge(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n>       visitor.visit(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:25:\
    \ \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _\nvisitors:20: in visit\n    ???\nvisitors:52: in _dot_edge\n    ???\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.GraphNodeVisitor object at 0x00000226BAF1F148>\nnode =\
    \ <_ast.Module object at 0x00000226BB11AD48>\n\n>   ???\nE   AttributeError: 'Module'\
    \ object has no attribute 'parent_field'\n\nvisitors:55: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 19
    operator: ROR
  number: 745
  status: killed
  tests_run: 1
  time: 0.34018373489379883
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000226BB2EE0C8>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x00000226BB1203C8>\n\n    def\
    \ test_multi_parents_node_label(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1\\nx = 2'))\n    \n        visitor.visit(node)\n    \n        dot_node =\
    \ visitor.graph.get_node(str(node.body[0].targets[0]))[0]\n>       assert dot_node.get_label()\
    \ == \"ast.Name(id='x', ctx=ast.Store())\"\nE       AssertionError\n\nsrc\\tests\\\
    astmonkeytests\\test_visitors.py:61: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_multi_parents_node_label
  module: null
  mutations:
  - lineno: 41
    operator: ROR
  number: 746
  status: killed
  tests_run: 5
  time: 0.3382275104522705
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 41
    operator: ROR
  number: 747
  status: survived
  tests_run: 316
  time: 0.7934105396270752
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BB71EE88>\nsource = 'x = 1\\n\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\n\nx = 1]
  module: null
  mutations:
  - lineno: 170
    operator: ROR
  number: 748
  status: killed
  tests_run: 12
  time: 0.348407506942749
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 170
    operator: ROR
  number: 749
  status: survived
  tests_run: 316
  time: 0.762913703918457
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BBAF5EC8>\nsource = 'def f():\\n    yield'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:884: in visit_FunctionDef\n   \
    \ ???\nvisitors:271: in body\n    ???\nvisitors:251: in correct_line_number\n\
    \    ???\nvisitors:254: in add_missing_lines\n    ???\nvisitors:222: in _newline_needed\n\
    \    ???\nvisitors:203: in _get_actual_lineno\n    ???\n_ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Expr\
    \ object at 0x00000226BBB030C8>\n\n>   ???\nE   AttributeError: 'Yield' object\
    \ has no attribute 's'\n\nvisitors:213: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    yield]
  module: null
  mutations:
  - lineno: 202
    operator: ROR
  number: 750
  status: killed
  tests_run: 29
  time: 0.42768025398254395
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BBD22888>\nsource = \"''' This is a multi line docstring.\\n\\\
    nFurther description...\\n'''\"\n\n    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n\
    \    def test_codegen_roundtrip(self, source):\n        \"\"\"Check if converting\
    \ code into AST and converting it back to code yields the same code.\"\"\"\n \
    \       node = ast.parse(source)\n>       generated = to_source(node)\n\nsrc\\\
    tests\\astmonkeytests\\test_visitors.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvisitors:137: in to_source\n\
    \    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\\
    Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:352: in\
    \ visit_Module\n    ???\nvisitors:271: in body\n    ???\nvisitors:251: in correct_line_number\n\
    \    ???\nvisitors:254: in add_missing_lines\n    ???\nvisitors:222: in _newline_needed\n\
    \    ???\nvisitors:203: in _get_actual_lineno\n    ???\n_ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Expr\
    \ object at 0x00000226BBD22F48>\n\n>   ???\nE   AttributeError: 'str' object has\
    \ no attribute 'decode'\n\nvisitors:217: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip['''
    This is a multi line docstring.\n\nFurther description...\n''']
  module: null
  mutations:
  - lineno: 216
    operator: ROR
  number: 751
  status: killed
  tests_run: 121
  time: 0.5046384334564209
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BBF114C8>\nsource = 'x = 1\\nx = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1\nx = 1]
  module: null
  mutations:
  - lineno: 224
    operator: ROR
  number: 752
  status: killed
  tests_run: 11
  time: 0.36497926712036133
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC110248>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 224
    operator: ROR
  number: 753
  status: killed
  tests_run: 6
  time: 0.3416624069213867
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BBB2AE88>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 321
    operator: ROR
  number: 754
  status: killed
  tests_run: 19
  time: 0.4079091548919678
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC3F3988>\nsource = 'if x:\\n    pass\\nelif y:\\n    pass'\n\n\
    \    @pytest.mark.parametrize(\"source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self,\
    \ source):\n        \"\"\"Check if converting code into AST and converting it\
    \ back to code yields the same code.\"\"\"\n        node = ast.parse(source)\n\
    \        generated = to_source(node)\n>       assert source == generated\nE  \
    \     AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[if
    x:\n    pass\nelif y:\n    pass]
  module: null
  mutations:
  - lineno: 452
    operator: ROR
  number: 755
  status: killed
  tests_run: 54
  time: 0.4195108413696289
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC5FEC48>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 608
    operator: ROR
  number: 756
  status: killed
  tests_run: 6
  time: 0.3452303409576416
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC80F5C8>\nsource = '0 + 0j'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[0
    + 0j]
  module: null
  mutations:
  - lineno: 608
    operator: ROR
  number: 757
  status: killed
  tests_run: 50
  time: 0.4689490795135498
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC9D21C8>\nsource = 'not x'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[not
    x]
  module: null
  mutations:
  - lineno: 671
    operator: ROR
  number: 758
  status: killed
  tests_run: 44
  time: 0.3948962688446045
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BCBB2748>\nsource = 'x[y:z:q]'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x[y:z:q]]
  module: null
  mutations:
  - lineno: 692
    operator: ROR
  number: 759
  status: killed
  tests_run: 88
  time: 0.4483163356781006
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BC3C9288>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 916
    operator: ROR
  number: 760
  status: killed
  tests_run: 79
  time: 1.4046592712402344
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000226BCF01688>\nsource = \"f'He said his name is {name}.'\"\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:391: in visit_Expr\n    ???\n..\\\
    ..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:281: in generic_visit\n\
    \    self.visit(value)\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\Documents\\\
    Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\nvisitors:1006:\
    \ in visit_JoinedStr\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\..\\..\\\
    Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36 object at 0x00000226BCE97848>\n\
    node = <_ast.FormattedValue object at 0x00000226BCF01908>\n\n>   ???\nE   OverflowError:\
    \ %c arg not in range(0x110000)\n\nvisitors:1013: OverflowError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f'He
    said his name is {name}.']
  module: null
  mutations:
  - lineno: 1012
    operator: ROR
  number: 761
  status: killed
  tests_run: 154
  time: 1.4615147113800049
- exception_traceback: "self = <test_visitors.TestGraphNodeVisitor object at 0x00000231C9A4B248>\n\
    visitor = <visitors.GraphNodeVisitor object at 0x00000231C9E2B308>\n\n    def\
    \ test_has_edge(self, visitor):\n        node = ParentChildNodeTransformer().visit(ast.parse('x\
    \ = 1'))\n    \n        visitor.visit(node)\n    \n>       assert visitor.graph.get_edge(str(node),\
    \ str(node.body[0]))\nE       AssertionError\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:27:\
    \ AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestGraphNodeVisitor::test_has_edge
  module: null
  mutations:
  - lineno: 16
    operator: SCD
  number: 762
  status: killed
  tests_run: 1
  time: 0.3222522735595703
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 13
    operator: SCI
  number: 763
  status: survived
  tests_run: 316
  time: 0.803525447845459
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 16
    operator: SCI
  number: 763
  status: bug
  tests_run: 316
  time: 0.803525447845459
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 160
    operator: SCI
  number: 764
  status: survived
  tests_run: 316
  time: 0.7994918823242188
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000193C03BBC88>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 163
    operator: SCI
  number: 765
  status: killed
  tests_run: 6
  time: 0.43239641189575195
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 187
    operator: SCI
  number: 766
  status: incompetent
  tests_run: 6
  time: 0.35193300247192383
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000193C097B1C8>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 345
    operator: SCI
  number: 767
  status: killed
  tests_run: 6
  time: 0.34362292289733887
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000193BE672808>\nsource = 'class Sample:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[class
    Sample:\n    pass]
  module: null
  mutations:
  - lineno: 851
    operator: SCI
  number: 768
  status: killed
  tests_run: 16
  time: 0.36803746223449707
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000193C0801AC8>\nsource = 'def f():\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[def
    f():\n    pass0]
  module: null
  mutations:
  - lineno: 874
    operator: SCI
  number: 769
  status: killed
  tests_run: 19
  time: 0.43859291076660156
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000193C03DA2C8>\nsource = 'with x:\\n    pass'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n>       generated\
    \ = to_source(node)\n\nsrc\\tests\\astmonkeytests\\test_visitors.py:392: \n_ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\
    visitors:137: in to_source\n    ???\nvisitors:347: in visit\n    ???\n..\\..\\\
    ..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271: in visit\n    return visitor(node)\n\
    visitors:352: in visit_Module\n    ???\nvisitors:272: in body\n    ???\nvisitors:347:\
    \ in visit\n    ???\n..\\..\\..\\..\\Documents\\Software\\Anaconda\\lib\\ast.py:271:\
    \ in visit\n    return visitor(node)\nvisitors:823: in visit_With\n    ???\nvisitors:909:\
    \ in with_body\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <visitors.SourceGeneratorNodeVisitorPython36\
    \ object at 0x00000193C0A10A88>\nnode = <_ast.With object at 0x00000193C03DAC88>,\
    \ prefixes = []\n\n>   ???\nE   AttributeError: 'With' object has no attribute\
    \ 'context_expr'\n\nvisitors:828: AttributeError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[with
    x:\n    pass]
  module: null
  mutations:
  - lineno: 908
    operator: SCI
  number: 770
  status: killed
  tests_run: 79
  time: 0.5225174427032471
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000193C0127E88>\nsource = 'x = 1'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[x
    = 1]
  module: null
  mutations:
  - lineno: 932
    operator: SCI
  number: 771
  status: killed
  tests_run: 6
  time: 0.40615415573120117
- exception_traceback: null
  killer: null
  module: null
  mutations:
  - lineno: 938
    operator: SCI
  number: 772
  status: incompetent
  tests_run: 47
  time: 0.47704100608825684
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000193C0B59548>\nsource = '(a, b) = enumerate(c)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[(a,
    b) = enumerate(c)]
  module: null
  mutations:
  - lineno: 960
    operator: SCI
  number: 773
  status: killed
  tests_run: 10
  time: 0.40613865852355957
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000193C16D9848>\nsource = 'f(*args)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(*args)]
  module: null
  mutations:
  - lineno: 989
    operator: SCI
  number: 774
  status: killed
  tests_run: 102
  time: 0.48424768447875977
- exception_traceback: "self = <test_visitors.TestSourceGeneratorNodeVisitor object\
    \ at 0x00000193C19974C8>\nsource = 'f(**kwargs)'\n\n    @pytest.mark.parametrize(\"\
    source\", roundtrip_testdata)\n    def test_codegen_roundtrip(self, source):\n\
    \        \"\"\"Check if converting code into AST and converting it back to code\
    \ yields the same code.\"\"\"\n        node = ast.parse(source)\n        generated\
    \ = to_source(node)\n>       assert source == generated\nE       AssertionError\n\
    \nsrc\\tests\\astmonkeytests\\test_visitors.py:393: AssertionError"
  killer: src/tests/astmonkeytests/test_visitors.py::TestSourceGeneratorNodeVisitor::test_codegen_roundtrip[f(**kwargs)]
  module: null
  mutations:
  - lineno: 992
    operator: SCI
  number: 775
  status: killed
  tests_run: 103
  time: 0.47526073455810547
time_stats:
  create_mutant_module: 4.117914438247681
  create_target_ast: 0.621016263961792
  mutate_module: 538.2971963882446
  run_tests_with_mutant: 449.743145942688
total_time: 567.2134799957275
